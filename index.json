{
  "api/Carcassonne.AI.ActionApproach.html": {
    "href": "api/Carcassonne.AI.ActionApproach.html",
    "title": "Enum ActionApproach | cARcassonne documentation",
    "keywords": "Enum ActionApproach Namespace : Carcassonne.AI Assembly : cs.temp.dll.dll Syntax public enum ActionApproach Fields Name Description Board Integrated SpaceBySpace"
  },
  "api/Carcassonne.AI.AIDecisionRequester.html": {
    "href": "api/Carcassonne.AI.AIDecisionRequester.html",
    "title": "Class AIDecisionRequester | cARcassonne documentation",
    "keywords": "Class AIDecisionRequester The AIDecisionRequester sets up the allowed number of actions for the AI and and requests a decision when needed. Version 1.0 Inheritance Object AIDecisionRequester Namespace : Carcassonne.AI Assembly : cs.temp.dll.dll Syntax public class AIDecisionRequester : MonoBehaviour Fields ai Declaration public CarcassonneAgent ai Field Value Type Description CarcassonneAgent reward Declaration public float reward Field Value Type Description Single"
  },
  "api/Carcassonne.AI.AIWrapper.html": {
    "href": "api/Carcassonne.AI.AIWrapper.html",
    "title": "Class AIWrapper | cARcassonne documentation",
    "keywords": "Class AIWrapper The AIWrapper acts as a middle-man between the AIPlayer-class and the data it needs and actions it can perform. It separates the AI logic from the code implementation. Its specific purpose is to allow the exact same AIPlayer-class to be used in the real environment and the training environment. This means the AIWrapper class will look different in both these project, as the code running the game differs in the two implementations. Version 1.0 Inheritance Object AIWrapper Namespace : Carcassonne.AI Assembly : cs.temp.dll.dll Syntax public class AIWrapper : MonoBehaviour Fields controller Declaration public GameController controller Field Value Type Description GameController meepleController Declaration public MeepleController meepleController Field Value Type Description MeepleController player Declaration public Player player Field Value Type Description Player state Declaration public GameState state Field Value Type Description GameState tileController Declaration public TileController tileController Field Value Type Description TileController Methods CanBePlaced() Declaration public bool CanBePlaced() Returns Type Description Boolean DiscardMeeple() Declaration public void DiscardMeeple() DrawMeeple() Declaration public bool DrawMeeple() Returns Type Description Boolean EndTurn() Declaration public void EndTurn() FreeCurrentMeeple() Declaration public void FreeCurrentMeeple() GetCurrentTileId() Declaration public int GetCurrentTileId() Returns Type Description Int32 GetCurrentTileRotations() Declaration public int GetCurrentTileRotations() Returns Type Description Int32 GetGamePhase() Declaration public Phase GetGamePhase() Returns Type Description Phase GetLimits() Declaration public RectInt GetLimits() Returns Type Description RectInt GetMaxBoardSize() Declaration public int GetMaxBoardSize() Returns Type Description Int32 GetMaxMeeples() Declaration public int GetMaxMeeples() Returns Type Description Int32 GetMaxTileId() Declaration public int GetMaxTileId() Returns Type Description Int32 GetMeeplesLeft() Declaration public int GetMeeplesLeft() Returns Type Description Int32 GetNumberOfPlacedTiles() Declaration public int GetNumberOfPlacedTiles() Returns Type Description Int32 GetOtherPotentialPointsChange() Declaration public float GetOtherPotentialPointsChange() Returns Type Description Single GetOtherScoreChange() Declaration public float GetOtherScoreChange() Returns Type Description Single GetOtherUnscoredPointsChange() Declaration public float GetOtherUnscoredPointsChange() Returns Type Description Single GetPotentialPointsChange() Declaration public float GetPotentialPointsChange() Returns Type Description Single GetScore() Declaration public float GetScore() Returns Type Description Single GetScoreChange() Declaration public float GetScoreChange() Returns Type Description Single GetTiles() Declaration public object[, ] GetTiles() Returns Type Description Object [,] GetTotalTiles() Declaration public int GetTotalTiles() Returns Type Description Int32 GetUnscoredPointsChange() Declaration public float GetUnscoredPointsChange() Returns Type Description Single IsAITurn() Declaration public bool IsAITurn() Returns Type Description Boolean PickUpTile() Declaration public bool PickUpTile() Returns Type Description Boolean PlaceMeeple(Vector2Int) Declaration public bool PlaceMeeple(Vector2Int meepleDirection) Parameters Type Name Description Vector2Int meepleDirection Returns Type Description Boolean PlaceTile(Vector2Int) Declaration public bool PlaceTile(Vector2Int cell) Parameters Type Name Description Vector2Int cell Returns Type Description Boolean Restart() Declaration [Obsolete(\"This *MIGHT* be obsolete. Perhaps don't use it.\")] public void Restart() RotateTile() Declaration public void RotateTile()"
  },
  "api/Carcassonne.AI.Board2DSensor.html": {
    "href": "api/Carcassonne.AI.Board2DSensor.html",
    "title": "Class Board2DSensor | cARcassonne documentation",
    "keywords": "Class Board2DSensor Inheritance Object Carcassonne2DSensorBase Board2DSensor Inherited Members Carcassonne2DSensorBase.m_Name Carcassonne2DSensorBase.m_Height Carcassonne2DSensorBase.m_Width Carcassonne2DSensorBase.m_Channels Carcassonne2DSensorBase.m_State Carcassonne2DSensorBase.GetObservationSpec() Carcassonne2DSensorBase.GetCompressedObservation() Carcassonne2DSensorBase.Update() Carcassonne2DSensorBase.Reset() Carcassonne2DSensorBase.GetCompressionSpec() Carcassonne2DSensorBase.GetName() Carcassonne2DSensorBase.Dispose() Namespace : Carcassonne.AI Assembly : cs.temp.dll.dll Syntax public class Board2DSensor : Carcassonne2DSensorBase, IDisposable Constructors Board2DSensor(GameState, String) Declaration public Board2DSensor(GameState mState, string name) Parameters Type Name Description GameState mState String name Methods Write(ObservationWriter) Declaration public override int Write(ObservationWriter writer) Parameters Type Name Description ObservationWriter writer Returns Type Description Int32 Overrides Carcassonne2DSensorBase.Write(ObservationWriter)"
  },
  "api/Carcassonne.AI.BoardAction.html": {
    "href": "api/Carcassonne.AI.BoardAction.html",
    "title": "Class BoardAction | cARcassonne documentation",
    "keywords": "Class BoardAction Inheritance Object BoardAction Namespace : Carcassonne.AI Assembly : cs.temp.dll.dll Syntax public static class BoardAction"
  },
  "api/Carcassonne.AI.BoardObservation.html": {
    "href": "api/Carcassonne.AI.BoardObservation.html",
    "title": "Class BoardObservation | cARcassonne documentation",
    "keywords": "Class BoardObservation Encapsulates different methods/approaches of having an AI observe a Carcassonne game board. Inheritance Object BoardObservation Namespace : Carcassonne.AI Assembly : cs.temp.dll.dll Syntax public static class BoardObservation Methods AddNoObservations(AIWrapper, VectorSensor) Declaration public static void AddNoObservations(AIWrapper wrapper, VectorSensor sensor) Parameters Type Name Description AIWrapper wrapper VectorSensor sensor AddPackedTileIdObservations(AIWrapper, VectorSensor) Adds observations to the given sensor based on the given game state. This method corresponds to PackedIDs . Tile ID and rotation is packed together with meeple direction on the tile, and the player ID of its owner, all into one observation. In total, 1 observations is made per tile. Declaration public static void AddPackedTileIdObservations(AIWrapper wrapper, VectorSensor sensor) Parameters Type Name Description AIWrapper wrapper Used to access the state of the game. VectorSensor sensor The observations are added to this sensor. AddPackedTileObservations(AIWrapper, VectorSensor) Adds observations to the given sensor based on the given game state. This method corresponds to Packed . Instead of using tile's ID and rotation, the internal geographies of the tile are explicitly packed into one observation. This removes the need for observing tile rotation, as it is implied by the geographies. Meeple direction on the tile, and the player ID of its owner are packed into another observation. In total, 2 observations are made per tile. Declaration public static void AddPackedTileObservations(AIWrapper wrapper, VectorSensor sensor) Parameters Type Name Description AIWrapper wrapper Used to access the state of the game. VectorSensor sensor The observations are added to this sensor. AddTileIdObservations(AIWrapper, VectorSensor) Adds observations to the given sensor based on the given game state. This method corresponds to TileIds . Tile ID and rotation is packed into one observation. Meeple direction on the tile, and the player ID of its owner are packed into another observation. In total, 2 observations are made per tile. Declaration public static void AddTileIdObservations(AIWrapper wrapper, VectorSensor sensor) Parameters Type Name Description AIWrapper wrapper Used to access the state of the game. VectorSensor sensor The observations are added to this sensor. AddTileWiseObservations(AIWrapper, VectorSensor) Declaration public static void AddTileWiseObservations(AIWrapper wrapper, VectorSensor sensor) Parameters Type Name Description AIWrapper wrapper VectorSensor sensor BuildMeepleMap(AIWrapper) This builds a dictionary of tile coordinates as keys, and meeple data (packed into a single int) as values. Note that this is a shameless workaround for not being able to access the meeple from the tile it occupies. If you could get the player id of the meeple placed, via the tile, then this method wouldn't needed. Please make it happen, and end this suffering. Declaration public static Dictionary<Vector2Int, int> BuildMeepleMap(AIWrapper wrapper) Parameters Type Name Description AIWrapper wrapper Returns Type Description Dictionary < Vector2Int , Int32 > A new dictionary of meeples that may be accessed using tile coordinates."
  },
  "api/Carcassonne.AI.BrdActions.html": {
    "href": "api/Carcassonne.AI.BrdActions.html",
    "title": "Enum BrdActions | cARcassonne documentation",
    "keywords": "Enum BrdActions Namespace : Carcassonne.AI Assembly : cs.temp.dll.dll Syntax public enum BrdActions Fields Name Description MeeplePosition TileRotate TileX TileY"
  },
  "api/Carcassonne.AI.Carcassonne2DSensorBase.html": {
    "href": "api/Carcassonne.AI.Carcassonne2DSensorBase.html",
    "title": "Class Carcassonne2DSensorBase | cARcassonne documentation",
    "keywords": "Class Carcassonne2DSensorBase Inheritance Object Carcassonne2DSensorBase Board2DSensor CurrentTile2DSensor Namespace : Carcassonne.AI Assembly : cs.temp.dll.dll Syntax public abstract class Carcassonne2DSensorBase : ISensor, IDisposable Constructors Carcassonne2DSensorBase(GameState, String) Declaration public Carcassonne2DSensorBase(GameState mState, string name) Parameters Type Name Description GameState mState String name Fields m_Channels Declaration protected int m_Channels Field Value Type Description Int32 m_Height Declaration protected int m_Height Field Value Type Description Int32 m_Name Declaration protected string m_Name Field Value Type Description String m_State Declaration protected GameState m_State Field Value Type Description GameState m_Width Declaration protected int m_Width Field Value Type Description Int32 Methods Dispose() Declaration public void Dispose() GetCompressedObservation() Declaration public byte[] GetCompressedObservation() Returns Type Description Byte [] GetCompressionSpec() Declaration public CompressionSpec GetCompressionSpec() Returns Type Description CompressionSpec GetName() Declaration public string GetName() Returns Type Description String GetObservationSpec() Declaration public ObservationSpec GetObservationSpec() Returns Type Description ObservationSpec Reset() Declaration public void Reset() Update() Declaration public void Update() Write(ObservationWriter) Declaration public abstract int Write(ObservationWriter writer) Parameters Type Name Description ObservationWriter writer Returns Type Description Int32"
  },
  "api/Carcassonne.AI.Carcassonne2DSensorComponent.html": {
    "href": "api/Carcassonne.AI.Carcassonne2DSensorComponent.html",
    "title": "Class Carcassonne2DSensorComponent | cARcassonne documentation",
    "keywords": "Class Carcassonne2DSensorComponent Inheritance Object Carcassonne2DSensorComponent Namespace : Carcassonne.AI Assembly : cs.temp.dll.dll Syntax public class Carcassonne2DSensorComponent : SensorComponent, IDisposable Fields state Declaration public GameState state Field Value Type Description GameState Properties SensorName Name of the generated Board2DSensor object. Note that changing this at runtime does not affect how the Agent sorts the sensors. Declaration public string SensorName { get; set; } Property Value Type Description String Methods CreateSensors() Declaration public override ISensor[] CreateSensors() Returns Type Description ISensor [] Dispose() Clean up the sensors created by CreateSensors(). Declaration public void Dispose()"
  },
  "api/Carcassonne.AI.CarcassonneAgent.html": {
    "href": "api/Carcassonne.AI.CarcassonneAgent.html",
    "title": "Class CarcassonneAgent | cARcassonne documentation",
    "keywords": "Class CarcassonneAgent The AI for the player. An AI user contains both a regular PlayerScript and this AI script to observe and take actions. Version 1.0 Inheritance Object CarcassonneAgent Namespace : Carcassonne.AI Assembly : cs.temp.dll.dll Syntax public class CarcassonneAgent : Agent Fields actionApproach Declaration public ActionApproach actionApproach Field Value Type Description ActionApproach ActionBias Declaration public float ActionBias Field Value Type Description Single cell Declaration public Vector2Int cell Field Value Type Description Vector2Int EnableEndOfTurnRewards Declaration public bool EnableEndOfTurnRewards Field Value Type Description Boolean InvalidAction Declaration public float InvalidAction Field Value Type Description Single Meeple Declaration public float Meeple Field Value Type Description Single MeeplePlacementPenalty Declaration public float MeeplePlacementPenalty Field Value Type Description Single observationApproach Declaration public ObservationApproach observationApproach Field Value Type Description ObservationApproach OtherScore Declaration public float OtherScore Field Value Type Description Single Score Declaration public float Score Field Value Type Description Single ValidAction Declaration public float ValidAction Field Value Type Description Single wrapper Declaration public AIWrapper wrapper Field Value Type Description AIWrapper Methods CollectObservations(VectorSensor) Collect all observations, normalized. Declaration public override void CollectObservations(VectorSensor sensor) Parameters Type Name Description VectorSensor sensor The vector sensor to add observations to Initialize() Initial setup which gets the scripts needed to AI calls and observations, called only once when the agent is enabled. Declaration public override void Initialize() OnActionReceived(ActionBuffers) Perform actions based on a vector of numbers. Which actions are made depend on the current game phase. Declaration public override void OnActionReceived(ActionBuffers actionBuffers) Parameters Type Name Description ActionBuffers actionBuffers The struct of actions to take OnEpisodeBegin() When a new episode begins, reset the agent and area Declaration public override void OnEpisodeBegin() Start() Declaration public void Start() WriteDiscreteActionMask(IDiscreteActionMask) Masks certain inputs so they cannot be used. Amount of viable inputs depends on the game phase. Declaration public override void WriteDiscreteActionMask(IDiscreteActionMask actionMask) Parameters Type Name Description IDiscreteActionMask actionMask The actions (related to ActionBuffer actioons) to disable or enable"
  },
  "api/Carcassonne.AI.CurrentTile2DSensor.html": {
    "href": "api/Carcassonne.AI.CurrentTile2DSensor.html",
    "title": "Class CurrentTile2DSensor | cARcassonne documentation",
    "keywords": "Class CurrentTile2DSensor Inheritance Object Carcassonne2DSensorBase CurrentTile2DSensor Inherited Members Carcassonne2DSensorBase.m_Name Carcassonne2DSensorBase.m_Height Carcassonne2DSensorBase.m_Width Carcassonne2DSensorBase.m_Channels Carcassonne2DSensorBase.m_State Carcassonne2DSensorBase.GetObservationSpec() Carcassonne2DSensorBase.GetCompressedObservation() Carcassonne2DSensorBase.Update() Carcassonne2DSensorBase.Reset() Carcassonne2DSensorBase.GetCompressionSpec() Carcassonne2DSensorBase.GetName() Carcassonne2DSensorBase.Dispose() Namespace : Carcassonne.AI Assembly : cs.temp.dll.dll Syntax public class CurrentTile2DSensor : Carcassonne2DSensorBase, IDisposable Constructors CurrentTile2DSensor(GameState, String) Declaration public CurrentTile2DSensor(GameState mState, string name) Parameters Type Name Description GameState mState String name Methods Write(ObservationWriter) Declaration public override int Write(ObservationWriter writer) Parameters Type Name Description ObservationWriter writer Returns Type Description Int32 Overrides Carcassonne2DSensorBase.Write(ObservationWriter)"
  },
  "api/Carcassonne.AI.DecisionAction.html": {
    "href": "api/Carcassonne.AI.DecisionAction.html",
    "title": "Enum DecisionAction | cARcassonne documentation",
    "keywords": "Enum DecisionAction Namespace : Carcassonne.AI Assembly : cs.temp.dll.dll Syntax public enum DecisionAction Fields Name Description DrawMeeple EndTurn"
  },
  "api/Carcassonne.AI.EventDecisionRequester.html": {
    "href": "api/Carcassonne.AI.EventDecisionRequester.html",
    "title": "Class EventDecisionRequester | cARcassonne documentation",
    "keywords": "Class EventDecisionRequester Inheritance Object EventDecisionRequester Namespace : Carcassonne.AI Assembly : cs.temp.dll.dll Syntax public class EventDecisionRequester : MonoBehaviour Fields ai Declaration public CarcassonneAgent ai Field Value Type Description CarcassonneAgent decisionRequested Declaration public bool decisionRequested Field Value Type Description Boolean Methods NewTurn() Declaration public void NewTurn() RequestDecision() Declaration public void RequestDecision() RequestDecision(Tile) Declaration public void RequestDecision(Tile t) Parameters Type Name Description Tile t RequestDecision(Tile, Vector2Int) Declaration public void RequestDecision(Tile t, Vector2Int v) Parameters Type Name Description Tile t Vector2Int v Update() Declaration public void Update()"
  },
  "api/Carcassonne.AI.EventScorer.html": {
    "href": "api/Carcassonne.AI.EventScorer.html",
    "title": "Class EventScorer | cARcassonne documentation",
    "keywords": "Class EventScorer Inheritance Object EventScorer Namespace : Carcassonne.AI Assembly : cs.temp.dll.dll Syntax public class EventScorer : MonoBehaviour Fields agent Declaration public CarcassonneAgent agent Field Value Type Description CarcassonneAgent OtherCompletedFeatureMultiplier Declaration public float OtherCompletedFeatureMultiplier Field Value Type Description Single OtherCompletedFeatureScore Declaration public float OtherCompletedFeatureScore Field Value Type Description Single OwnCompletedFeatureMultiplier Declaration public float OwnCompletedFeatureMultiplier Field Value Type Description Single OwnCompletedFeatureScore Declaration public float OwnCompletedFeatureScore Field Value Type Description Single UnownedCompletedFeatureMultiplier Declaration public float UnownedCompletedFeatureMultiplier Field Value Type Description Single UnownedCompletedFeatureScore Declaration public float UnownedCompletedFeatureScore Field Value Type Description Single Methods ScoreCompletedFeature(FeatureGraph) Declaration public void ScoreCompletedFeature(FeatureGraph g) Parameters Type Name Description FeatureGraph g Start() Declaration public void Start()"
  },
  "api/Carcassonne.AI.Extensions.html": {
    "href": "api/Carcassonne.AI.Extensions.html",
    "title": "Class Extensions | cARcassonne documentation",
    "keywords": "Class Extensions Inheritance Object Extensions Namespace : Carcassonne.AI Assembly : cs.temp.dll.dll Syntax public static class Extensions Methods Direction(MeeplePosition) Declaration public static Vector2Int Direction(this MeeplePosition position) Parameters Type Name Description MeeplePosition position Returns Type Description Vector2Int"
  },
  "api/Carcassonne.AI.html": {
    "href": "api/Carcassonne.AI.html",
    "title": "Namespace Carcassonne.AI | cARcassonne documentation",
    "keywords": "Namespace Carcassonne.AI Classes AIDecisionRequester The AIDecisionRequester sets up the allowed number of actions for the AI and and requests a decision when needed. Version 1.0 AIWrapper The AIWrapper acts as a middle-man between the AIPlayer-class and the data it needs and actions it can perform. It separates the AI logic from the code implementation. Its specific purpose is to allow the exact same AIPlayer-class to be used in the real environment and the training environment. This means the AIWrapper class will look different in both these project, as the code running the game differs in the two implementations. Version 1.0 Board2DSensor BoardAction BoardObservation Encapsulates different methods/approaches of having an AI observe a Carcassonne game board. Carcassonne2DSensorBase Carcassonne2DSensorComponent CarcassonneAgent The AI for the player. An AI user contains both a regular PlayerScript and this AI script to observe and take actions. Version 1.0 CurrentTile2DSensor EventDecisionRequester EventScorer Extensions Enums ActionApproach BrdActions DecisionAction MeeplePosition ObservationApproach Represents the different approaches when it comes to observing the Carcassonne game board. SBSActions"
  },
  "api/Carcassonne.AI.MeeplePosition.html": {
    "href": "api/Carcassonne.AI.MeeplePosition.html",
    "title": "Enum MeeplePosition | cARcassonne documentation",
    "keywords": "Enum MeeplePosition Namespace : Carcassonne.AI Assembly : cs.temp.dll.dll Syntax public enum MeeplePosition Fields Name Description Centre Down Left None Right Up"
  },
  "api/Carcassonne.AI.ObservationApproach.html": {
    "href": "api/Carcassonne.AI.ObservationApproach.html",
    "title": "Enum ObservationApproach | cARcassonne documentation",
    "keywords": "Enum ObservationApproach Represents the different approaches when it comes to observing the Carcassonne game board. Namespace : Carcassonne.AI Assembly : cs.temp.dll.dll Syntax public enum ObservationApproach Fields Name Description None Packed PackedIDs TileIds TileWise"
  },
  "api/Carcassonne.AI.SBSActions.html": {
    "href": "api/Carcassonne.AI.SBSActions.html",
    "title": "Enum SBSActions | cARcassonne documentation",
    "keywords": "Enum SBSActions Namespace : Carcassonne.AI Assembly : cs.temp.dll.dll Syntax public enum SBSActions Fields Name Description Decision MeepleDiscardPlace MeeplePosition TileLeftRight TilePlace TileRotate TileUpDown"
  },
  "api/Carcassonne.AI.Training.GameStatsRecorder.html": {
    "href": "api/Carcassonne.AI.Training.GameStatsRecorder.html",
    "title": "Class GameStatsRecorder | cARcassonne documentation",
    "keywords": "Class GameStatsRecorder Inheritance Object GameStatsRecorder Namespace : Carcassonne.AI.Training Assembly : cs.temp.dll.dll Syntax public class GameStatsRecorder : MonoBehaviour Fields log Declaration public GameLog log Field Value Type Description GameLog state Declaration public GameState state Field Value Type Description GameState Methods OnGameOver() Declaration public void OnGameOver()"
  },
  "api/Carcassonne.AI.Training.html": {
    "href": "api/Carcassonne.AI.Training.html",
    "title": "Namespace Carcassonne.AI.Training | cARcassonne documentation",
    "keywords": "Namespace Carcassonne.AI.Training Classes GameStatsRecorder TurnStatsRecorder"
  },
  "api/Carcassonne.AI.Training.TurnStatsRecorder.html": {
    "href": "api/Carcassonne.AI.Training.TurnStatsRecorder.html",
    "title": "Class TurnStatsRecorder | cARcassonne documentation",
    "keywords": "Class TurnStatsRecorder Inheritance Object TurnStatsRecorder Namespace : Carcassonne.AI.Training Assembly : cs.temp.dll.dll Syntax public class TurnStatsRecorder : MonoBehaviour Fields log Declaration public GameLog log Field Value Type Description GameLog state Declaration public GameState state Field Value Type Description GameState Methods OnTurnEnd(Turn) Declaration public void OnTurnEnd(Turn t) Parameters Type Name Description Turn t"
  },
  "api/Carcassonne.AR.Buttons.ButtonBackplate.html": {
    "href": "api/Carcassonne.AR.Buttons.ButtonBackplate.html",
    "title": "Class ButtonBackplate | cARcassonne documentation",
    "keywords": "Class ButtonBackplate Inheritance Object ButtonBackplate Namespace : Carcassonne.AR.Buttons Assembly : cs.temp.dll.dll Syntax public class ButtonBackplate : MonoBehaviourPun Fields materials Declaration public Materials materials Field Value Type Description Materials meepleDown Declaration public Material meepleDown Field Value Type Description Material meepleInvalidAim Declaration public Material meepleInvalidAim Field Value Type Description Material meepleValidAim Declaration public Material meepleValidAim Field Value Type Description Material newTurn Declaration public Material newTurn Field Value Type Description Material tileDown Declaration public Material tileDown Field Value Type Description Material Methods HandleInvalidAim(Vector2Int) Declaration public void HandleInvalidAim(Vector2Int arg0) Parameters Type Name Description Vector2Int arg0 HandleMeepleDown(Meeple, Vector2Int) Declaration public void HandleMeepleDown(Meeple meeple, Vector2Int direction) Parameters Type Name Description Meeple meeple Vector2Int direction HandleNewTurn() Declaration public void HandleNewTurn() HandleTileDown(Tile, Vector2Int) Declaration public void HandleTileDown(Tile tile, Vector2Int cell) Parameters Type Name Description Tile tile Vector2Int cell HandleValidAim(Vector2Int) Declaration public void HandleValidAim(Vector2Int arg0) Parameters Type Name Description Vector2Int arg0"
  },
  "api/Carcassonne.AR.Buttons.ConfirmButton.html": {
    "href": "api/Carcassonne.AR.Buttons.ConfirmButton.html",
    "title": "Class ConfirmButton | cARcassonne documentation",
    "keywords": "Class ConfirmButton Inheritance Object ConfirmButton Namespace : Carcassonne.AR.Buttons Assembly : cs.temp.dll.dll Syntax public class ConfirmButton : MonoBehaviour Fields ConfirmableMaterial Declaration public Material ConfirmableMaterial Field Value Type Description Material ConfirmableSprite Declaration public Sprite ConfirmableSprite Field Value Type Description Sprite InvalidCick Declaration public UnityEvent InvalidCick Field Value Type Description UnityEvent meepleController Declaration public MeepleController meepleController Field Value Type Description MeepleController NonConfirmableMaterial Declaration public Material NonConfirmableMaterial Field Value Type Description Material NonConfirmableSprite Declaration public Sprite NonConfirmableSprite Field Value Type Description Sprite state Declaration public GameState state Field Value Type Description GameState tileController Declaration public TileController tileController Field Value Type Description TileController turnController Declaration public TurnController turnController Field Value Type Description TurnController ValidClick Declaration public UnityEvent ValidClick Field Value Type Description UnityEvent Methods OnClick() Declaration public void OnClick() OnDiscard(MonoBehaviour) Declaration public void OnDiscard(MonoBehaviour gamePiece) Parameters Type Name Description MonoBehaviour gamePiece OnDraw(MonoBehaviour) Declaration public void OnDraw(MonoBehaviour gamePiece) Parameters Type Name Description MonoBehaviour gamePiece OnMeepleChange() Declaration public void OnMeepleChange() OnPlace(MonoBehaviour, Vector2Int) Declaration public void OnPlace(MonoBehaviour gamePiece, Vector2Int placement) Parameters Type Name Description MonoBehaviour gamePiece Vector2Int placement OnTileChange() Declaration public void OnTileChange() ReAnchor(GameObject) Declaration public void ReAnchor(GameObject gamepiece) Parameters Type Name Description GameObject gamepiece SetConfirmable() Declaration public void SetConfirmable() SetNonConfirmable() Declaration public void SetNonConfirmable()"
  },
  "api/Carcassonne.AR.Buttons.html": {
    "href": "api/Carcassonne.AR.Buttons.html",
    "title": "Namespace Carcassonne.AR.Buttons | cARcassonne documentation",
    "keywords": "Namespace Carcassonne.AR.Buttons Classes ButtonBackplate ConfirmButton"
  },
  "api/Carcassonne.AR.GameControllerScript.html": {
    "href": "api/Carcassonne.AR.GameControllerScript.html",
    "title": "Class GameControllerScript | cARcassonne documentation",
    "keywords": "Class GameControllerScript Inheritance Object GameControllerScript Implements IGameControllerInterface Namespace : Carcassonne.AR Assembly : cs.temp.dll.dll Syntax public class GameControllerScript : MonoBehaviourPun Properties gameController Declaration public GameController gameController { get; } Property Value Type Description GameController meepleController Declaration public MeepleController meepleController { get; } Property Value Type Description MeepleController state Declaration public GameState state { get; } Property Value Type Description GameState tileController Declaration public TileController tileController { get; } Property Value Type Description TileController turnController Declaration public TurnController turnController { get; } Property Value Type Description TurnController Methods ConfirmDiscardRPC() Declaration public void ConfirmDiscardRPC() ConfirmPlacement() Declaration public void ConfirmPlacement() ConfirmPlacementRPC() Declaration public void ConfirmPlacementRPC() EndTurn() Declaration public void EndTurn() EndTurnRPC() Declaration public void EndTurnRPC() NewGame() Declaration public void NewGame() Implements IGameControllerInterface"
  },
  "api/Carcassonne.AR.GamePieces.ARTile.html": {
    "href": "api/Carcassonne.AR.GamePieces.ARTile.html",
    "title": "Class ARTile | cARcassonne documentation",
    "keywords": "Class ARTile Inheritance Object ARTile Implements IPunInstantiateMagicCallback Namespace : Carcassonne.AR.GamePieces Assembly : cs.temp.dll.dll Syntax public class ARTile : MonoBehaviourPun Fields eastCollider The vIndex of the tile. Is applied when placed on the board Declaration public GameObject eastCollider Field Value Type Description GameObject northCollider The vIndex of the tile. Is applied when placed on the board Declaration public GameObject northCollider Field Value Type Description GameObject southCollider The vIndex of the tile. Is applied when placed on the board Declaration public GameObject southCollider Field Value Type Description GameObject textures The list of textures. All tile instances have a reference of all the textures so it can assign it to itself depending on the tile ID Declaration public Texture[] textures Field Value Type Description Texture [] westCollider The vIndex of the tile. Is applied when placed on the board Declaration public GameObject westCollider Field Value Type Description GameObject Properties arTileController Declaration public TileControllerScript arTileController { get; } Property Value Type Description TileControllerScript rotation How many times the tile has been rotated. In standard the rotation is 0, and rotated 4 times it returns to 0. Declaration public int rotation { get; } Property Value Type Description Int32 tile Declaration public Tile tile { get; } Property Value Type Description Tile tileController Declaration public TileController tileController { get; } Property Value Type Description TileController Methods DebugCell(Vector2Int) Declaration public void DebugCell(Vector2Int cell) Parameters Type Name Description Vector2Int cell DebugPlace(Vector2Int, Int32) Declaration public void DebugPlace(Vector2Int cell, int rotation) Parameters Type Name Description Vector2Int cell Int32 rotation DebugRotate(Int32) Declaration public void DebugRotate(int rotation) Parameters Type Name Description Int32 rotation OnPhotonInstantiate(PhotonMessageInfo) Declaration public void OnPhotonInstantiate(PhotonMessageInfo info) Parameters Type Name Description PhotonMessageInfo info OnPlace(Tile, Vector2Int) Declaration public void OnPlace(Tile tile, Vector2Int cell) Parameters Type Name Description Tile tile Vector2Int cell Rotate() The method used to rotate the tile. In essence it just cycles the rotation between 1 and 3 (and returns to 0 when rotated after 3), and switches the north east south west values clockwise. Declaration public void Rotate() Rotate(Int32) Declaration public void Rotate(int rotations) Parameters Type Name Description Int32 rotations RotateTo(Int32) Declaration public void RotateTo(int orientation) Parameters Type Name Description Int32 orientation ToString() Declaration public override string ToString() Returns Type Description String Implements IPunInstantiateMagicCallback"
  },
  "api/Carcassonne.AR.GamePieces.html": {
    "href": "api/Carcassonne.AR.GamePieces.html",
    "title": "Namespace Carcassonne.AR.GamePieces | cARcassonne documentation",
    "keywords": "Namespace Carcassonne.AR.GamePieces Classes ARTile"
  },
  "api/Carcassonne.AR.html": {
    "href": "api/Carcassonne.AR.html",
    "title": "Namespace Carcassonne.AR | cARcassonne documentation",
    "keywords": "Namespace Carcassonne.AR Classes GameControllerScript KeyboardController Materials MatrixRepresentationController MeepleControllerScript TileControllerScript TurnController"
  },
  "api/Carcassonne.AR.KeyboardController.html": {
    "href": "api/Carcassonne.AR.KeyboardController.html",
    "title": "Class KeyboardController | cARcassonne documentation",
    "keywords": "Class KeyboardController Inheritance Object KeyboardController Namespace : Carcassonne.AR Assembly : cs.temp.dll.dll Syntax public class KeyboardController : MonoBehaviourPun"
  },
  "api/Carcassonne.AR.Materials.html": {
    "href": "api/Carcassonne.AR.Materials.html",
    "title": "Class Materials | cARcassonne documentation",
    "keywords": "Class Materials Inheritance Object Materials Namespace : Carcassonne.AR Assembly : cs.temp.dll.dll Syntax public class Materials : ScriptableObject Fields buttonMaterials Declaration public Material[] buttonMaterials Field Value Type Description Material [] playerMaterials Declaration public Material[] playerMaterials Field Value Type Description Material []"
  },
  "api/Carcassonne.AR.MatrixRepresentationController.html": {
    "href": "api/Carcassonne.AR.MatrixRepresentationController.html",
    "title": "Class MatrixRepresentationController | cARcassonne documentation",
    "keywords": "Class MatrixRepresentationController Inheritance Object MatrixRepresentationController Namespace : Carcassonne.AR Assembly : cs.temp.dll.dll Syntax public class MatrixRepresentationController : MonoBehaviourPun Fields sb Declaration public StringBuilder sb Field Value Type Description StringBuilder sw Declaration public StringWriter sw Field Value Type Description StringWriter writer Declaration public JsonWriter writer Field Value Type Description JsonWriter Methods OnApplicationQuit() Declaration public void OnApplicationQuit() RunPythonImageGenerator() Declaration public void RunPythonImageGenerator() Start() Declaration public void Start()"
  },
  "api/Carcassonne.AR.MeepleControllerScript.html": {
    "href": "api/Carcassonne.AR.MeepleControllerScript.html",
    "title": "Class MeepleControllerScript | cARcassonne documentation",
    "keywords": "Class MeepleControllerScript Inheritance Object MeepleControllerScript Namespace : Carcassonne.AR Assembly : cs.temp.dll.dll Syntax public class MeepleControllerScript : MonoBehaviourPun Fields confirmButton Declaration public ConfirmButton confirmButton Field Value Type Description ConfirmButton meepleGrid Declaration public Grid meepleGrid Field Value Type Description Grid meepleGroup Declaration public byte meepleGroup Field Value Type Description Byte meepleSpawnPosition Declaration public GameObject meepleSpawnPosition Field Value Type Description GameObject OnInvalidAim Declaration public UnityEvent<Vector2Int> OnInvalidAim Field Value Type Description UnityEvent < Vector2Int > OnValidAim Declaration public UnityEvent<Vector2Int> OnValidAim Field Value Type Description UnityEvent < Vector2Int > parent Declaration public GameObject parent Field Value Type Description GameObject prefab Declaration public GameObject prefab Field Value Type Description GameObject Methods DiscardMeeple() Declaration public void DiscardMeeple() DrawMeeple() Declaration public void DrawMeeple() DrawMeepleRPC() Declaration public void DrawMeepleRPC() GetNewInstance() Instantiate a new Meeple with the chosen prefab and parent object in the hierarchy. Declaration public MeepleScript GetNewInstance() Returns Type Description MeepleScript GameObject : An instance of MeepleScript.prefab. OnDiscardMeeple(Meeple) Declaration public void OnDiscardMeeple(Meeple meeple) Parameters Type Name Description Meeple meeple OnDraw(Meeple) Declaration public void OnDraw(Meeple meeple) Parameters Type Name Description Meeple meeple OnFreeMeeple() Declaration public void OnFreeMeeple() OnInvalidDraw() Declaration public void OnInvalidDraw() OnMeeplePlaced(Meeple) Declaration public void OnMeeplePlaced(Meeple meeple) Parameters Type Name Description Meeple meeple OnPlace(Meeple, Vector2Int) Declaration public void OnPlace(Meeple meeple, Vector2Int cell) Parameters Type Name Description Meeple meeple Vector2Int cell PlaceMeeple() Declaration public void PlaceMeeple()"
  },
  "api/Carcassonne.AR.TileControllerScript.html": {
    "href": "api/Carcassonne.AR.TileControllerScript.html",
    "title": "Class TileControllerScript | cARcassonne documentation",
    "keywords": "Class TileControllerScript Inheritance Object TileControllerScript Namespace : Carcassonne.AR Assembly : cs.temp.dll.dll Syntax public class TileControllerScript : MonoBehaviourPun Fields confirmButton Declaration public ConfirmButton confirmButton Field Value Type Description ConfirmButton startingTileID Declaration public int startingTileID Field Value Type Description Int32 tileGrid Declaration public Grid tileGrid Field Value Type Description Grid tileGroup Declaration public byte tileGroup Field Value Type Description Byte tileParent Declaration public Transform tileParent Field Value Type Description Transform tilePrefab Declaration public Tile tilePrefab Field Value Type Description Tile Methods OnDiscard() Declaration public void OnDiscard() OnDraw(Tile) Declaration public void OnDraw(Tile tile) Parameters Type Name Description Tile tile OnInvalidPlace() Declaration public void OnInvalidPlace() OnPlace() Declaration public void OnPlace() OnPlace(Tile, Vector2Int) Declaration public void OnPlace(Tile tile, Vector2Int cell) Parameters Type Name Description Tile tile Vector2Int cell OnRotate() Declaration public void OnRotate() PlaceTile() Declaration public void PlaceTile() RPCDiscard() Declaration public void RPCDiscard() RPCDraw() Declaration public void RPCDraw() RPCInvalidPlace() Declaration public void RPCInvalidPlace() RPCPlace() Declaration public void RPCPlace() RPCRotate() Declaration public void RPCRotate()"
  },
  "api/Carcassonne.AR.TurnController.html": {
    "href": "api/Carcassonne.AR.TurnController.html",
    "title": "Class TurnController | cARcassonne documentation",
    "keywords": "Class TurnController Inheritance Object TurnController Namespace : Carcassonne.AR Assembly : cs.temp.dll.dll Syntax public class TurnController : MonoBehaviour Fields buttons Declaration public List<Interactable> buttons Field Value Type Description List < Interactable > manipulators Declaration public List<ObjectManipulator> manipulators Field Value Type Description List < ObjectManipulator > OnLocalAITurnEnd Declaration public UnityEvent OnLocalAITurnEnd Field Value Type Description UnityEvent OnLocalAITurnStart Declaration public UnityEvent OnLocalAITurnStart Field Value Type Description UnityEvent OnLocalHumanTurnEnd Declaration public UnityEvent OnLocalHumanTurnEnd Field Value Type Description UnityEvent OnLocalHumanTurnStart Declaration public UnityEvent OnLocalHumanTurnStart Field Value Type Description UnityEvent OnLocalTurnEnd Declaration public UnityEvent OnLocalTurnEnd Field Value Type Description UnityEvent OnLocalTurnStart Declaration public UnityEvent OnLocalTurnStart Field Value Type Description UnityEvent Methods IsLocalAITurn() Declaration public bool IsLocalAITurn() Returns Type Description Boolean IsLocalHumanTurn() Declaration public bool IsLocalHumanTurn() Returns Type Description Boolean IsLocalTurn() Is AI turn or human turn being executed on the local machine. Declaration public bool IsLocalTurn() Returns Type Description Boolean OnTurnEnd() Declaration public void OnTurnEnd() OnTurnStart() Declaration public void OnTurnStart()"
  },
  "api/Carcassonne.CarcassonneVisualization.html": {
    "href": "api/Carcassonne.CarcassonneVisualization.html",
    "title": "Class CarcassonneVisualization | cARcassonne documentation",
    "keywords": "Class CarcassonneVisualization This script is to be used in combination with the shader \"CarcassoneVisualization\". Inheritance Object CarcassonneVisualization Namespace : Carcassonne Assembly : cs.temp.dll.dll Syntax public class CarcassonneVisualization : MonoBehaviour Fields state Declaration public GameState state Field Value Type Description GameState Methods Init() Initializes the board with empty tile and meeple data. If initial data with the max size is not sent initially, the size of the first call to will be set as the max size, and will not grow any larger. Declaration public void Init() UpdateMaterial(VisualizationInputTiles, Vector2Int, Vector2Int, MeepleState) Updates the material to display the given section of tiles. Declaration public void UpdateMaterial(VisualizationInputTiles inputTiles, Vector2Int displaySize, Vector2Int displayOffset, MeepleState meeples) Parameters Type Name Description VisualizationInputTiles inputTiles A wrapped 2d array of the entire grid of tiles. Vector2Int displaySize The 2-dimensional nbr of tiles to be displayed. Specifies how much of inputTiles to display. Vector2Int displayOffset The tile-space offset of the tiles to be displayed into the entire tile array. MeepleState meeples VisualizeBoard() Use this method to send tile and meeple data to the shader. If you're already sending a subsection of all tile data, consider using UpdateMaterial instead. However, you will have to know the current offset of your tiles into the original tile array of all tiles. Declaration public void VisualizeBoard()"
  },
  "api/Carcassonne.Controllers.GameController.html": {
    "href": "api/Carcassonne.Controllers.GameController.html",
    "title": "Class GameController | cARcassonne documentation",
    "keywords": "Class GameController Inheritance Object GameController Namespace : Carcassonne.Controllers Assembly : cs.temp.dll.dll Syntax public class GameController : MonoBehaviour Fields OnFeatureCompleted Declaration public UnityEvent<FeatureGraph> OnFeatureCompleted Field Value Type Description UnityEvent < FeatureGraph > OnGameOver Declaration public UnityEvent OnGameOver Field Value Type Description UnityEvent OnGameStart Declaration public UnityEvent OnGameStart Field Value Type Description UnityEvent OnScoreChanged Declaration public UnityEvent OnScoreChanged Field Value Type Description UnityEvent OnTurnEnd Declaration public UnityEvent OnTurnEnd Field Value Type Description UnityEvent OnTurnStart Declaration public UnityEvent OnTurnStart Field Value Type Description UnityEvent Properties AllEvents Declaration public List<UnityEventBase> AllEvents { get; } Property Value Type Description List < UnityEventBase > bounds Declaration public RectInt bounds { get; } Property Value Type Description RectInt Events Declaration public List<UnityEventBase> Events { get; } Property Value Type Description List < UnityEventBase > player Declaration public Player player { get; } Property Value Type Description Player state Stores the full state of the game for processing. Declaration public GameState state { get; } Property Value Type Description GameState Turn Declaration public int Turn { get; } Property Value Type Description Int32 Methods EndTurn() End the current players turn. Calculate any points acquired by placement of tile and/or meeple and move from phase TileDown or MeepleDown to either NewTurn or if there are no more tiles that can be drawn, end the game through GameOver() Declaration public bool EndTurn() Returns Type Description Boolean FreeMeeplesInFeatures(IEnumerable<FeatureGraph>) Declaration public void FreeMeeplesInFeatures(IEnumerable<FeatureGraph> features) Parameters Type Name Description IEnumerable < FeatureGraph > features GameOver() Declaration public void GameOver() NewGame(IList<Player>, IList<Meeple>, Stack<Tile>) Starts a new game of Carcassonne. Declaration public void NewGame(IList<Player> players, IList<Meeple> meeples, Stack<Tile> tiles) Parameters Type Name Description IList < Player > players IList < Meeple > meeples Stack < Tile > tiles NewTurn() Declaration public void NewTurn() UpdateScores(IDictionary<Player, Int32>) Declaration public void UpdateScores(IDictionary<Player, int> scoringPlayers) Parameters Type Name Description IDictionary < Player , Int32 > scoringPlayers"
  },
  "api/Carcassonne.Controllers.GamePieceController-1.html": {
    "href": "api/Carcassonne.Controllers.GamePieceController-1.html",
    "title": "Class GamePieceController<T> | cARcassonne documentation",
    "keywords": "Class GamePieceController<T> Inheritance Object GamePieceController<T> MeepleController TileController Namespace : Carcassonne.Controllers Assembly : cs.temp.dll.dll Syntax public abstract class GamePieceController<T> : MonoBehaviour Type Parameters Name Description T Fields OnDiscard Declaration public UnityEvent<T> OnDiscard Field Value Type Description UnityEvent <T> OnDraw Declaration public UnityEvent<T> OnDraw Field Value Type Description UnityEvent <T> OnFree Declaration public UnityEvent<T> OnFree Field Value Type Description UnityEvent <T> OnInvalidDraw Declaration public UnityEvent OnInvalidDraw Field Value Type Description UnityEvent OnInvalidPlace Declaration public UnityEvent<T, Vector2Int> OnInvalidPlace Field Value Type Description UnityEvent <T, Vector2Int > OnPlace Declaration public UnityEvent<T, Vector2Int> OnPlace Field Value Type Description UnityEvent <T, Vector2Int > OnRotate Declaration public UnityEvent<T, int> OnRotate Field Value Type Description UnityEvent <T, Int32 > Properties Events Declaration public List<UnityEventBase> Events { get; } Property Value Type Description List < UnityEventBase > Methods CanBePlaced() Declaration public abstract bool CanBePlaced() Returns Type Description Boolean Discard() Declaration public abstract void Discard() DoDraw() Thin wrapper around draw because Unity Events can't have return types. Declaration public void DoDraw() Draw() Declaration public abstract bool Draw() Returns Type Description Boolean Free() Declaration public void Free() IsPlacementValid(Vector2Int) Declaration public abstract bool IsPlacementValid(Vector2Int cell) Parameters Type Name Description Vector2Int cell Returns Type Description Boolean Place(Vector2Int) Declaration public abstract bool Place(Vector2Int cell) Parameters Type Name Description Vector2Int cell Returns Type Description Boolean Rotate() Declaration public void Rotate()"
  },
  "api/Carcassonne.Controllers.html": {
    "href": "api/Carcassonne.Controllers.html",
    "title": "Namespace Carcassonne.Controllers | cARcassonne documentation",
    "keywords": "Namespace Carcassonne.Controllers Classes GameController GamePieceController<T> MeepleController TileController Maintains the state of a tile that is in play. Responsible for maintaining rotation and location of tile and setting the state when the tile is placed. Interfaces IGameControllerInterface"
  },
  "api/Carcassonne.Controllers.IGameControllerInterface.html": {
    "href": "api/Carcassonne.Controllers.IGameControllerInterface.html",
    "title": "Interface IGameControllerInterface | cARcassonne documentation",
    "keywords": "Interface IGameControllerInterface Namespace : Carcassonne.Controllers Assembly : cs.temp.dll.dll Syntax public interface IGameControllerInterface Methods NewGame() Start a new game. This controller is responsible for instantiating the deck, the players, and the meeples. Then, it calls the low-level GameController's NewGame function Declaration void NewGame()"
  },
  "api/Carcassonne.Controllers.MeepleController.html": {
    "href": "api/Carcassonne.Controllers.MeepleController.html",
    "title": "Class MeepleController | cARcassonne documentation",
    "keywords": "Class MeepleController Inheritance Object GamePieceController < Meeple > MeepleController Inherited Members GamePieceController<Meeple>.DoDraw() GamePieceController<Meeple>.Rotate() GamePieceController<Meeple>.Free() GamePieceController<Meeple>.OnDraw GamePieceController<Meeple>.OnInvalidDraw GamePieceController<Meeple>.OnRotate GamePieceController<Meeple>.OnDiscard GamePieceController<Meeple>.OnFree GamePieceController<Meeple>.OnPlace GamePieceController<Meeple>.OnInvalidPlace GamePieceController<Meeple>.Events Namespace : Carcassonne.Controllers Assembly : cs.temp.dll.dll Syntax public class MeepleController : GamePieceController<Meeple> Properties grid Declaration public GridMapper grid { get; } Property Value Type Description GridMapper Methods CanBePlaced() Declaration public override bool CanBePlaced() Returns Type Description Boolean Overrides Carcassonne.Controllers.GamePieceController<Carcassonne.Models.Meeple>.CanBePlaced() Discard() Declaration public override void Discard() Overrides Carcassonne.Controllers.GamePieceController<Carcassonne.Models.Meeple>.Discard() Draw() Declaration public override bool Draw() Returns Type Description Boolean Overrides Carcassonne.Controllers.GamePieceController<Carcassonne.Models.Meeple>.Draw() Free(Meeple) Declaration public void Free(Meeple meeple) Parameters Type Name Description Meeple meeple IsPlacementValid(Vector2Int) Declaration public override bool IsPlacementValid(Vector2Int cell) Parameters Type Name Description Vector2Int cell Returns Type Description Boolean Overrides Carcassonne.Controllers.GamePieceController<Carcassonne.Models.Meeple>.IsPlacementValid(Vector2Int) IsPlacementValid(Vector2Int, Vector2Int) Check whether the placement is valid ON A TILE THAT HAS NOT YET BEEN PLACED. Declaration public bool IsPlacementValid(Vector2Int position, Vector2Int direction) Parameters Type Name Description Vector2Int position Vector2Int direction Returns Type Description Boolean Place(Vector2Int) Declaration public override bool Place(Vector2Int cell) Parameters Type Name Description Vector2Int cell Returns Type Description Boolean Overrides Carcassonne.Controllers.GamePieceController<Carcassonne.Models.Meeple>.Place(Vector2Int)"
  },
  "api/Carcassonne.Controllers.TileController.html": {
    "href": "api/Carcassonne.Controllers.TileController.html",
    "title": "Class TileController | cARcassonne documentation",
    "keywords": "Class TileController Maintains the state of a tile that is in play. Responsible for maintaining rotation and location of tile and setting the state when the tile is placed. Inheritance Object GamePieceController < Tile > TileController Inherited Members GamePieceController<Tile>.DoDraw() GamePieceController<Tile>.Rotate() GamePieceController<Tile>.Free() GamePieceController<Tile>.OnDraw GamePieceController<Tile>.OnInvalidDraw GamePieceController<Tile>.OnRotate GamePieceController<Tile>.OnDiscard GamePieceController<Tile>.OnFree GamePieceController<Tile>.OnPlace GamePieceController<Tile>.OnInvalidPlace GamePieceController<Tile>.Events Namespace : Carcassonne.Controllers Assembly : cs.temp.dll.dll Syntax public class TileController : GamePieceController<Tile> Methods CanBePlaced() Declaration public override bool CanBePlaced() Returns Type Description Boolean Overrides Carcassonne.Controllers.GamePieceController<Carcassonne.Models.Tile>.CanBePlaced() CellIsOccupied(Vector2Int) Declaration public bool CellIsOccupied(Vector2Int cell) Parameters Type Name Description Vector2Int cell Returns Type Description Boolean Discard() Discard the current tile. This is used when the tile is not playable on the board and should be removed from the game. The current tile is set to null and the event is invoked. Declaration public override void Discard() Overrides Carcassonne.Controllers.GamePieceController<Carcassonne.Models.Tile>.Discard() Draw() Draw a new tile. Pick a tile from the stack, set the current tile state, check if the tile is valid, set game state, Declaration public override bool Draw() Returns Type Description Boolean Overrides Carcassonne.Controllers.GamePieceController<Carcassonne.Models.Tile>.Draw() IsPlacementValid(Vector2Int) Declaration public override bool IsPlacementValid(Vector2Int cell) Parameters Type Name Description Vector2Int cell Returns Type Description Boolean Overrides Carcassonne.Controllers.GamePieceController<Carcassonne.Models.Tile>.IsPlacementValid(Vector2Int) Place(Vector2Int) Declaration public override bool Place(Vector2Int cell) Parameters Type Name Description Vector2Int cell Returns Type Description Boolean Overrides Carcassonne.Controllers.GamePieceController<Carcassonne.Models.Tile>.Place(Vector2Int) PlaceFirst() Declaration public void PlaceFirst() Rotate(Int32) Rotates the current tile by 90 degrees, r times. Declaration public void Rotate(int r = 1) Parameters Type Name Description Int32 r RotateTo(Int32) Declaration public void RotateTo(int r) Parameters Type Name Description Int32 r"
  },
  "api/Carcassonne.html": {
    "href": "api/Carcassonne.html",
    "title": "Namespace Carcassonne | cARcassonne documentation",
    "keywords": "Namespace Carcassonne Classes CarcassonneVisualization This script is to be used in combination with the shader \"CarcassoneVisualization\". Structs VisualizationInputTiles A method parameter struct that enforces a certain array size and handles erroneous input sizes to"
  },
  "api/Carcassonne.Meeples.html": {
    "href": "api/Carcassonne.Meeples.html",
    "title": "Namespace Carcassonne.Meeples | cARcassonne documentation",
    "keywords": "Namespace Carcassonne.Meeples Classes MeepleScript"
  },
  "api/Carcassonne.Meeples.MeepleScript.html": {
    "href": "api/Carcassonne.Meeples.MeepleScript.html",
    "title": "Class MeepleScript | cARcassonne documentation",
    "keywords": "Class MeepleScript Inheritance Object MeepleScript Implements IPunInstantiateMagicCallback Namespace : Carcassonne.Meeples Assembly : cs.temp.dll.dll Syntax public class MeepleScript : MonoBehaviourPun Properties meeple Declaration public Meeple meeple { get; } Property Value Type Description Meeple player Declaration public Player player { get; set; } Property Value Type Description Player Methods Get(Meeple) Declaration public static MeepleScript Get(Meeple m) Parameters Type Name Description Meeple m Returns Type Description MeepleScript OnPhotonInstantiate(PhotonMessageInfo) Declaration public void OnPhotonInstantiate(PhotonMessageInfo info) Parameters Type Name Description PhotonMessageInfo info Implements IPunInstantiateMagicCallback"
  },
  "api/Carcassonne.Models.Extensions.html": {
    "href": "api/Carcassonne.Models.Extensions.html",
    "title": "Class Extensions | cARcassonne documentation",
    "keywords": "Class Extensions Inheritance Object Extensions Namespace : Carcassonne.Models Assembly : cs.temp.dll.dll Syntax public static class Extensions Methods HasCity(Geography) Does this Geography include a City ? Declaration public static bool HasCity(this Geography geography) Parameters Type Name Description Geography geography Returns Type Description Boolean True if Geography is one of City , CityRoad , CityStream HasCityOrRoad(Geography) Does this Geography include a City or Road ? Declaration public static bool HasCityOrRoad(this Geography geography) Parameters Type Name Description Geography geography Returns Type Description Boolean True if Geography is one of City , Road , CityRoad , CityStream , RoadStream HasRoad(Geography) Does this Geography include a Road ? Declaration public static bool HasRoad(this Geography geography) Parameters Type Name Description Geography geography Returns Type Description Boolean True if Geography is one of Road , CityRoad , RoadStream IsFeature(Geography) Is this subtile represents a . The only features are , , and . Declaration public static bool IsFeature(this Geography geography) Parameters Type Name Description Geography geography Returns Type Description Boolean Simple(Geography) Get the simple feature that the subtile represents if a Meeple is on it. For example, if a subtile is CityRoad , a meeple placed on the subtile is on the . Declaration public static Geography Simple(this Geography geography) Parameters Type Name Description Geography geography Returns Type Description Geography"
  },
  "api/Carcassonne.Models.Geography.html": {
    "href": "api/Carcassonne.Models.Geography.html",
    "title": "Enum Geography | cARcassonne documentation",
    "keywords": "Enum Geography Namespace : Carcassonne.Models Assembly : cs.temp.dll.dll Syntax [Flags] public enum Geography Fields Name Description City CityRoad CityStream Cloister Field Road RoadStream Stream Village"
  },
  "api/Carcassonne.Models.GridMapper.html": {
    "href": "api/Carcassonne.Models.GridMapper.html",
    "title": "Class GridMapper | cARcassonne documentation",
    "keywords": "Class GridMapper Inheritance Object GridMapper Namespace : Carcassonne.Models Assembly : cs.temp.dll.dll Syntax public class GridMapper : MonoBehaviour Fields meeple Declaration public Grid meeple Field Value Type Description Grid tile Declaration public Grid tile Field Value Type Description Grid Methods MeepleToDirection(Vector2Int) Direction is in the four cardinal directions (Up, Down, Left, Right) and their variations (Centre, Left/Up, etc.) Declaration public Vector2Int MeepleToDirection(Vector2Int cell) Parameters Type Name Description Vector2Int cell Returns Type Description Vector2Int MeepleToTile(Vector2Int) Declaration public Vector2Int MeepleToTile(Vector2Int cell) Parameters Type Name Description Vector2Int cell Returns Type Description Vector2Int MeepleToTileDirection(Vector2Int) Declaration public (Vector2Int cell, Vector2Int direction) MeepleToTileDirection(Vector2Int cell) Parameters Type Name Description Vector2Int cell Returns Type Description (T1, T2) < Vector2Int , Vector2Int > TileToMeeple(Vector2Int) Declaration public Vector2Int TileToMeeple(Vector2Int cell) Parameters Type Name Description Vector2Int cell Returns Type Description Vector2Int TileToMeeple(Vector2Int, Vector2Int) Declaration public Vector2Int TileToMeeple(Vector2Int cell, Vector2Int direction) Parameters Type Name Description Vector2Int cell Vector2Int direction Returns Type Description Vector2Int"
  },
  "api/Carcassonne.Models.html": {
    "href": "api/Carcassonne.Models.html",
    "title": "Namespace Carcassonne.Models | cARcassonne documentation",
    "keywords": "Namespace Carcassonne.Models Classes Extensions GridMapper Meeple Player Tile A tile piece from the Carcassonne game. This is the base model for a game tile and holds information about the features that it contains as well as its rotational state. The tile class also contains static information about the base tile deck for the game as a whole, so that the tiles can be instantiated in the game. Enums Geography Tile.TileSet Describes the different set of game tiles (used in different versions of gameplay)."
  },
  "api/Carcassonne.Models.Meeple.html": {
    "href": "api/Carcassonne.Models.Meeple.html",
    "title": "Class Meeple | cARcassonne documentation",
    "keywords": "Class Meeple Inheritance Object Meeple Namespace : Carcassonne.Models Assembly : cs.temp.dll.dll Syntax public class Meeple : MonoBehaviour Fields player Declaration public Player player Field Value Type Description Player"
  },
  "api/Carcassonne.Models.Player.html": {
    "href": "api/Carcassonne.Models.Player.html",
    "title": "Class Player | cARcassonne documentation",
    "keywords": "Class Player Inheritance Object Player Namespace : Carcassonne.Models Assembly : cs.temp.dll.dll Syntax public class Player : MonoBehaviour, IComparable<Player> Fields id Declaration public int id Field Value Type Description Int32 potentialPoints Declaration public int potentialPoints Field Value Type Description Int32 previousPotentialPoints Declaration public int previousPotentialPoints Field Value Type Description Int32 previousScore Declaration public int previousScore Field Value Type Description Int32 previousUnscoredPoints Declaration public int previousUnscoredPoints Field Value Type Description Int32 score Declaration public int score Field Value Type Description Int32 unscoredPoints Declaration public int unscoredPoints Field Value Type Description Int32 username Declaration public string username Field Value Type Description String Properties FinalScore Declaration public int FinalScore { get; } Property Value Type Description Int32 potentialPointsChange Declaration public int potentialPointsChange { get; } Property Value Type Description Int32 scoreChange Declaration public int scoreChange { get; } Property Value Type Description Int32 unscoredPointsChange Declaration public int unscoredPointsChange { get; } Property Value Type Description Int32 Methods CompareTo(Player) Declaration public int CompareTo(Player other) Parameters Type Name Description Player other Returns Type Description Int32 UpdateScores() Declaration public void UpdateScores()"
  },
  "api/Carcassonne.Models.Tile.html": {
    "href": "api/Carcassonne.Models.Tile.html",
    "title": "Class Tile | cARcassonne documentation",
    "keywords": "Class Tile A tile piece from the Carcassonne game. This is the base model for a game tile and holds information about the features that it contains as well as its rotational state. The tile class also contains static information about the base tile deck for the game as a whole, so that the tiles can be instantiated in the game. Inheritance Object Tile Namespace : Carcassonne.Models Assembly : cs.temp.dll.dll Syntax public class Tile : MonoBehaviour Fields Directions Declaration public static Vector2Int[] Directions Field Value Type Description Vector2Int [] set Defines whether the tile is a member of the base set or one of the expansions or alternate tile sets. Declaration public Tile.TileSet set Field Value Type Description Tile.TileSet SubTileDimension Declaration public const int SubTileDimension = 3 Field Value Type Description Int32 TileCount Declaration public static int TileCount Field Value Type Description Int32 Properties Center Declaration public Geography? Center { get; } Property Value Type Description Nullable < Geography > East Declaration public Geography East { get; } Property Value Type Description Geography Geographies Declaration public IDictionary<Vector2Int, Geography> Geographies { get; } Property Value Type Description IDictionary < Vector2Int , Geography > ID Declaration public int ID { get; set; } Property Value Type Description Int32 IsReady Declaration public bool IsReady { get; } Property Value Type Description Boolean Matrix The sub-tile matrix representation of this tile. The bottom corner (Left-Down) is 0,0 and the top (Right, Top is (2,2). This is done to match the representation used in the game. I don't know if it lines up with other image representations. Coordinates are represented [Horiz, Vert] Declaration public Geography[, ] Matrix { get; } Property Value Type Description Geography [,] North These are closely related to the Up, Down, Left and Right geographies. When the tile is rotated the values shift to correlate to the new rotation: If Up is road, but the rotation is 1 then East gets the value of Up, since it's rotated 90 degrees clockwise. If rotation is 0 then North is equal to Up. Declaration public Geography North { get; } Property Value Type Description Geography Rotations The number of times the tile has been rotated by 90 degrees. Valid values [0,3]. Declaration public int Rotations { get; } Property Value Type Description Int32 Shield True if this tile has a shield (worth 2 extra points for the city on the tile). Declaration public bool Shield { get; } Property Value Type Description Boolean Sides The Geography of each of the 4 outer sides of the tile. Values are stored as a Dictionary with the keys being the directions represented by the values Vector2Int.Up , Vector2Int.Right , Vector2Int.Down , and Vector2Int.Left . Declaration public Dictionary<Vector2Int, Geography> Sides { get; } Property Value Type Description Dictionary < Vector2Int , Geography > South Declaration public Geography South { get; } Property Value Type Description Geography West Declaration public Geography West { get; } Property Value Type Description Geography Methods GetGeographies(Int32) Depending on the ID of the tile it recieves different attributes. ID's in tiles are not unique and they share them with other tiles who also recieve the same attributes. Declaration public static Dictionary<Vector2Int, Geography> GetGeographies(int id) Parameters Type Name Description Int32 id Returns Type Description Dictionary < Vector2Int , Geography > GetGeographyAt(Vector2Int) Declaration public Geography GetGeographyAt(Vector2Int direction) Parameters Type Name Description Vector2Int direction Returns Type Description Geography Exceptions Type Condition ArgumentOutOfRangeException GetIDDistribution() Declaration public static Dictionary<int, int> GetIDDistribution() Returns Type Description Dictionary < Int32 , Int32 > Rotate(Int32) This should only be called by the tile controller. All in-game rotations should use the tile controller's rotation function. Declaration public void Rotate(int times = 1) Parameters Type Name Description Int32 times RotateTo(Int32) Declaration public void RotateTo(int rotations) Parameters Type Name Description Int32 rotations ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "api/Carcassonne.Models.Tile.TileSet.html": {
    "href": "api/Carcassonne.Models.Tile.TileSet.html",
    "title": "Enum Tile.TileSet | cARcassonne documentation",
    "keywords": "Enum Tile.TileSet Describes the different set of game tiles (used in different versions of gameplay). Namespace : Carcassonne.Models Assembly : cs.temp.dll.dll Syntax public enum TileSet Fields Name Description Base River"
  },
  "api/Carcassonne.Players.ARPlayer.html": {
    "href": "api/Carcassonne.Players.ARPlayer.html",
    "title": "Class ARPlayer | cARcassonne documentation",
    "keywords": "Class ARPlayer Inheritance Object ARPlayer Implements IPunInstantiateMagicCallback Namespace : Carcassonne.Players Assembly : cs.temp.dll.dll Syntax public class ARPlayer : MonoBehaviourPun Methods OnPhotonInstantiate(PhotonMessageInfo) Declaration public void OnPhotonInstantiate(PhotonMessageInfo info) Parameters Type Name Description PhotonMessageInfo info Implements IPunInstantiateMagicCallback"
  },
  "api/Carcassonne.Players.html": {
    "href": "api/Carcassonne.Players.html",
    "title": "Namespace Carcassonne.Players | cARcassonne documentation",
    "keywords": "Namespace Carcassonne.Players Classes ARPlayer PlayerScoreScript"
  },
  "api/Carcassonne.Players.PlayerScoreScript.html": {
    "href": "api/Carcassonne.Players.PlayerScoreScript.html",
    "title": "Class PlayerScoreScript | cARcassonne documentation",
    "keywords": "Class PlayerScoreScript Inheritance Object PlayerScoreScript Namespace : Carcassonne.Players Assembly : cs.temp.dll.dll Syntax public class PlayerScoreScript : MonoBehaviourPun Fields controller Declaration public GameControllerScript controller Field Value Type Description GameControllerScript materialIndex Declaration public int[] materialIndex Field Value Type Description Int32 [] materials Zero-indexed player number Declaration public Materials materials Field Value Type Description Materials player Declaration public Player player Field Value Type Description Player state Declaration public GameState state Field Value Type Description GameState Methods ChangeMaterial() Declaration public void ChangeMaterial() OnGameStart() Deactivate HUD if it is unused, update the score, and update the text if it is local. Declaration public void OnGameStart() SetLocal() Declaration public void SetLocal() UpdateCurrentPlayer() Declaration public void UpdateCurrentPlayer() UpdateScore() Declaration public void UpdateScore()"
  },
  "api/Carcassonne.State.Coordinates.html": {
    "href": "api/Carcassonne.State.Coordinates.html",
    "title": "Class Coordinates | cARcassonne documentation",
    "keywords": "Class Coordinates Inheritance Object Coordinates Namespace : Carcassonne.State Assembly : cs.temp.dll.dll Syntax public static class Coordinates Fields BoardToUnityScale Declaration public static float BoardToUnityScale Field Value Type Description Single Methods BoardToUnity(Vector2Int) Declaration public static Vector3 BoardToUnity(Vector2Int board) Parameters Type Name Description Vector2Int board Returns Type Description Vector3 SubTileToBoard(Vector2Int) Declaration public static (Vector2Int position, Vector2Int direction) SubTileToBoard(Vector2Int subTilePosition) Parameters Type Name Description Vector2Int subTilePosition Returns Type Description (T1, T2) < Vector2Int , Vector2Int > SubTileToDirection(Vector2Int) Declaration public static Vector2Int SubTileToDirection(Vector2Int subTilePosition) Parameters Type Name Description Vector2Int subTilePosition Returns Type Description Vector2Int SubTileToTile(Vector2Int) Declaration public static Vector2Int SubTileToTile(Vector2Int subTilePosition) Parameters Type Name Description Vector2Int subTilePosition Returns Type Description Vector2Int TileToSubTile(Vector2Int, Vector2Int) Declaration public static Vector2Int TileToSubTile(Vector2Int position, Vector2Int direction) Parameters Type Name Description Vector2Int position Vector2Int direction Returns Type Description Vector2Int"
  },
  "api/Carcassonne.State.Features.BoardChangedEventArgs.html": {
    "href": "api/Carcassonne.State.Features.BoardChangedEventArgs.html",
    "title": "Class BoardChangedEventArgs | cARcassonne documentation",
    "keywords": "Class BoardChangedEventArgs Event arguments for a BoardGraph.Changed event. graph: A reference to the graph in question vertices: New vertices added to the graph edges: New edges added to the graph Inheritance Object EventArgs BoardChangedEventArgs Namespace : Carcassonne.State.Features Assembly : cs.temp.dll.dll Syntax public class BoardChangedEventArgs : EventArgs Fields edges Declaration public IEnumerable<CarcassonneEdge> edges Field Value Type Description IEnumerable < CarcassonneEdge > graph Declaration public BoardGraph graph Field Value Type Description BoardGraph vertices Declaration public IEnumerable<SubTile> vertices Field Value Type Description IEnumerable < SubTile >"
  },
  "api/Carcassonne.State.Features.BoardGraph.html": {
    "href": "api/Carcassonne.State.Features.BoardGraph.html",
    "title": "Class BoardGraph | cARcassonne documentation",
    "keywords": "Class BoardGraph Inheritance Object CarcassonneGraph BoardGraph Inherited Members CarcassonneGraph.Bounds CarcassonneGraph.ToString() CarcassonneGraph.GenerateGraphML(String) CarcassonneGraph.GenerateGraphviz() CarcassonneGraph.Locations CarcassonneGraph.HasMeeples CarcassonneGraph.Meeples CarcassonneGraph.PlayerMeeples CarcassonneGraph.ScoresPoints(Player) Namespace : Carcassonne.State.Features Assembly : cs.temp.dll.dll Syntax public class BoardGraph : CarcassonneGraph Methods Add(BoardGraph) Declaration public void Add(BoardGraph b) Parameters Type Name Description BoardGraph b FromTile(Tile, Vector2Int, GridMapper) Get a graph representation of the tile itself. Declaration public static BoardGraph FromTile(Tile tile, Vector2Int location, GridMapper grid) Parameters Type Name Description Tile tile Vector2Int location GridMapper grid Returns Type Description BoardGraph OnChanged(BoardChangedEventArgs) Declaration protected virtual void OnChanged(BoardChangedEventArgs args) Parameters Type Name Description BoardChangedEventArgs args SetPlayer(Player) Declaration public void SetPlayer(Player p) Parameters Type Name Description Player p SetTurn(Int32) Declaration public void SetTurn(int turn) Parameters Type Name Description Int32 turn Events Changed Declaration public event EventHandler<BoardChangedEventArgs> Changed Event Type Type Description EventHandler < BoardChangedEventArgs >"
  },
  "api/Carcassonne.State.Features.CarcassonneEdge.html": {
    "href": "api/Carcassonne.State.Features.CarcassonneEdge.html",
    "title": "Class CarcassonneEdge | cARcassonne documentation",
    "keywords": "Class CarcassonneEdge Inheritance Object CarcassonneEdge Namespace : Carcassonne.State.Features Assembly : cs.temp.dll.dll Syntax public class CarcassonneEdge : Edge<SubTile> Constructors CarcassonneEdge(SubTile, SubTile, ConnectionType) Declaration public CarcassonneEdge(SubTile source, SubTile target, ConnectionType type) Parameters Type Name Description SubTile source SubTile target ConnectionType type Fields type Declaration public ConnectionType type Field Value Type Description ConnectionType Properties Tag Declaration public ConnectionType Tag { get; } Property Value Type Description ConnectionType typeID Declaration public int typeID { get; } Property Value Type Description Int32"
  },
  "api/Carcassonne.State.Features.CarcassonneGraph.html": {
    "href": "api/Carcassonne.State.Features.CarcassonneGraph.html",
    "title": "Class CarcassonneGraph | cARcassonne documentation",
    "keywords": "Class CarcassonneGraph Inheritance Object CarcassonneGraph BoardGraph FeatureGraph Namespace : Carcassonne.State.Features Assembly : cs.temp.dll.dll Syntax public class CarcassonneGraph : UndirectedGraph<SubTile, CarcassonneEdge> Properties Bounds Get the bounding box in the SubTile Coordinate system. Declaration public RectInt Bounds { get; } Property Value Type Description RectInt HasMeeples Declaration public bool HasMeeples { get; } Property Value Type Description Boolean Locations Declaration public IEnumerable<Vector2Int> Locations { get; } Property Value Type Description IEnumerable < Vector2Int > Meeples Declaration public IEnumerable<Meeple> Meeples { get; } Property Value Type Description IEnumerable < Meeple > PlayerMeeples Declaration public IDictionary<Player, int> PlayerMeeples { get; } Property Value Type Description IDictionary < Player , Int32 > Methods GenerateGraphML(String) Declaration public void GenerateGraphML(string filename) Parameters Type Name Description String filename GenerateGraphviz() Declaration public string GenerateGraphviz() Returns Type Description String ScoresPoints(Player) Declaration public bool ScoresPoints(Player p) Parameters Type Name Description Player p Returns Type Description Boolean ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "api/Carcassonne.State.Features.City.html": {
    "href": "api/Carcassonne.State.Features.City.html",
    "title": "Class City | cARcassonne documentation",
    "keywords": "Class City Inheritance Object CarcassonneGraph FeatureGraph City Implements IFeature Inherited Members FeatureGraph.Segments FeatureGraph.OpenSides FeatureGraph.Complete FeatureGraph.IntraTileFeatureConnections CarcassonneGraph.Bounds CarcassonneGraph.ToString() CarcassonneGraph.GenerateGraphML(String) CarcassonneGraph.GenerateGraphviz() CarcassonneGraph.Locations CarcassonneGraph.HasMeeples CarcassonneGraph.Meeples CarcassonneGraph.PlayerMeeples CarcassonneGraph.ScoresPoints(Player) Namespace : Carcassonne.State.Features Assembly : cs.temp.dll.dll Syntax public class City : FeatureGraph, IFeature Fields CityFilter Declaration public static Func<IEnumerable<CarcassonneEdge>, IEnumerable<CarcassonneEdge>> CityFilter Field Value Type Description Func < IEnumerable < CarcassonneEdge >, IEnumerable < CarcassonneEdge >> Properties Points Declaration public override int Points { get; } Property Value Type Description Int32 Overrides FeatureGraph.Points PotentialPoints Declaration public override int PotentialPoints { get; } Property Value Type Description Int32 Overrides FeatureGraph.PotentialPoints Shields Declaration public int Shields { get; } Property Value Type Description Int32 Methods CityFromVertexList(BoardGraph, IEnumerable<SubTile>) Declaration public static City CityFromVertexList(BoardGraph bg, IEnumerable<SubTile> vertices) Parameters Type Name Description BoardGraph bg IEnumerable < SubTile > vertices Returns Type Description City FromBoardGraph(BoardGraph) Declaration public static List<City> FromBoardGraph(BoardGraph bg) Parameters Type Name Description BoardGraph bg Returns Type Description List < City > Implements IFeature"
  },
  "api/Carcassonne.State.Features.Cloister.html": {
    "href": "api/Carcassonne.State.Features.Cloister.html",
    "title": "Class Cloister | cARcassonne documentation",
    "keywords": "Class Cloister Inheritance Object CarcassonneGraph FeatureGraph Cloister Implements IFeature Inherited Members FeatureGraph.Complete FeatureGraph.IntraTileFeatureConnections CarcassonneGraph.Bounds CarcassonneGraph.ToString() CarcassonneGraph.GenerateGraphML(String) CarcassonneGraph.GenerateGraphviz() CarcassonneGraph.Locations CarcassonneGraph.HasMeeples CarcassonneGraph.Meeples CarcassonneGraph.PlayerMeeples CarcassonneGraph.ScoresPoints(Player) Namespace : Carcassonne.State.Features Assembly : cs.temp.dll.dll Syntax public class Cloister : FeatureGraph, IFeature Properties OpenSides Declaration public override int OpenSides { get; } Property Value Type Description Int32 Overrides FeatureGraph.OpenSides Points Declaration public override int Points { get; } Property Value Type Description Int32 Overrides FeatureGraph.Points PotentialPoints Declaration public override int PotentialPoints { get; } Property Value Type Description Int32 Overrides FeatureGraph.PotentialPoints Segments Declaration public override int Segments { get; } Property Value Type Description Int32 Overrides FeatureGraph.Segments Methods FromBoardGraph(BoardGraph) Declaration public static List<Cloister> FromBoardGraph(BoardGraph bg) Parameters Type Name Description BoardGraph bg Returns Type Description List < Cloister > Implements IFeature"
  },
  "api/Carcassonne.State.Features.ConnectionType.html": {
    "href": "api/Carcassonne.State.Features.ConnectionType.html",
    "title": "Enum ConnectionType | cARcassonne documentation",
    "keywords": "Enum ConnectionType Namespace : Carcassonne.State.Features Assembly : cs.temp.dll.dll Syntax public enum ConnectionType Fields Name Description Board Feature Tile"
  },
  "api/Carcassonne.State.Features.FeatureGraph.html": {
    "href": "api/Carcassonne.State.Features.FeatureGraph.html",
    "title": "Class FeatureGraph | cARcassonne documentation",
    "keywords": "Class FeatureGraph Inheritance Object CarcassonneGraph FeatureGraph City Cloister Road Implements IFeature Inherited Members CarcassonneGraph.Bounds CarcassonneGraph.ToString() CarcassonneGraph.GenerateGraphML(String) CarcassonneGraph.GenerateGraphviz() CarcassonneGraph.Locations CarcassonneGraph.HasMeeples CarcassonneGraph.Meeples CarcassonneGraph.PlayerMeeples CarcassonneGraph.ScoresPoints(Player) Namespace : Carcassonne.State.Features Assembly : cs.temp.dll.dll Syntax public abstract class FeatureGraph : CarcassonneGraph, IFeature Properties Complete Declaration public virtual bool Complete { get; } Property Value Type Description Boolean IntraTileFeatureConnections A count of the number of vertices representing a single feature on a single tile in the city. For example, if a city is split on a tile (two ports are disconnected) that tile would return 0 for this measure. But if the NORTH and SOUTH of a tile were a connected city, it would return 1. Declaration protected int IntraTileFeatureConnections { get; } Property Value Type Description Int32 OpenSides Declaration public virtual int OpenSides { get; } Property Value Type Description Int32 Points Declaration public abstract int Points { get; } Property Value Type Description Int32 PotentialPoints How many points would the current tiles be worth, if the feature were complete? This captures the expanded value of city tiles, which double if the city is completed. Declaration public abstract int PotentialPoints { get; } Property Value Type Description Int32 Segments Declaration public virtual int Segments { get; } Property Value Type Description Int32 Implements IFeature"
  },
  "api/Carcassonne.State.Features.FilteredConnectedComponentsAlgorithm-2.html": {
    "href": "api/Carcassonne.State.Features.FilteredConnectedComponentsAlgorithm-2.html",
    "title": "Class FilteredConnectedComponentsAlgorithm<TVertex, TEdge> | cARcassonne documentation",
    "keywords": "Class FilteredConnectedComponentsAlgorithm<TVertex, TEdge> Algorithm that computes connected components of a graph. Inheritance Object FilteredConnectedComponentsAlgorithm<TVertex, TEdge> Implements IConnectedComponentAlgorithm <TVertex, TEdge, IUndirectedGraph <TVertex, TEdge>> Namespace : Carcassonne.State.Features Assembly : cs.temp.dll.dll Syntax public sealed class FilteredConnectedComponentsAlgorithm<TVertex, TEdge> : AlgorithmBase<IUndirectedGraph<TVertex, TEdge>> where TEdge : IEdge<TVertex> Type Parameters Name Description TVertex Vertex type. TEdge Edge type. Constructors FilteredConnectedComponentsAlgorithm(IAlgorithmComponent, IUndirectedGraph<TVertex, TEdge>, IDictionary<TVertex, Int32>, Func<IEnumerable<TEdge>, IEnumerable<TEdge>>) Initializes a new instance of the class. Declaration public FilteredConnectedComponentsAlgorithm(IAlgorithmComponent host, IUndirectedGraph<TVertex, TEdge> visitedGraph, IDictionary<TVertex, int> components, Func<IEnumerable<TEdge>, IEnumerable<TEdge>> adjacentEdgesFilter) Parameters Type Name Description IAlgorithmComponent host Host to use if set, otherwise use this reference. IUndirectedGraph <TVertex, TEdge> visitedGraph Graph to visit. IDictionary <TVertex, Int32 > components Graph components. Func < IEnumerable <TEdge>, IEnumerable <TEdge>> adjacentEdgesFilter FilteredConnectedComponentsAlgorithm(IUndirectedGraph<TVertex, TEdge>, IDictionary<TVertex, Int32>, Func<IEnumerable<TEdge>, IEnumerable<TEdge>>) Initializes a new instance of the class. Declaration public FilteredConnectedComponentsAlgorithm(IUndirectedGraph<TVertex, TEdge> visitedGraph, IDictionary<TVertex, int> components, Func<IEnumerable<TEdge>, IEnumerable<TEdge>> adjacentEdgesFilter) Parameters Type Name Description IUndirectedGraph <TVertex, TEdge> visitedGraph Graph to visit. IDictionary <TVertex, Int32 > components Graph components. Func < IEnumerable <TEdge>, IEnumerable <TEdge>> adjacentEdgesFilter FilteredConnectedComponentsAlgorithm(IUndirectedGraph<TVertex, TEdge>, Func<IEnumerable<TEdge>, IEnumerable<TEdge>>) Initializes a new instance of the class. Declaration public FilteredConnectedComponentsAlgorithm(IUndirectedGraph<TVertex, TEdge> visitedGraph, Func<IEnumerable<TEdge>, IEnumerable<TEdge>> adjacentEdgesFilter) Parameters Type Name Description IUndirectedGraph <TVertex, TEdge> visitedGraph Graph to visit. Func < IEnumerable <TEdge>, IEnumerable <TEdge>> adjacentEdgesFilter Properties AdjacentEdgesFilter Declaration public Func<IEnumerable<TEdge>, IEnumerable<TEdge>> AdjacentEdgesFilter { get; } Property Value Type Description Func < IEnumerable <TEdge>, IEnumerable <TEdge>> ComponentCount Declaration public int ComponentCount { get; } Property Value Type Description Int32 Components Declaration public IDictionary<TVertex, int> Components { get; } Property Value Type Description IDictionary <TVertex, Int32 > Methods Initialize() Declaration protected override void Initialize() InternalCompute() Declaration protected override void InternalCompute() Implements IConnectedComponentAlgorithm<, , >"
  },
  "api/Carcassonne.State.Features.html": {
    "href": "api/Carcassonne.State.Features.html",
    "title": "Namespace Carcassonne.State.Features | cARcassonne documentation",
    "keywords": "Namespace Carcassonne.State.Features Classes BoardChangedEventArgs Event arguments for a BoardGraph.Changed event. graph: A reference to the graph in question vertices: New vertices added to the graph edges: New edges added to the graph BoardGraph CarcassonneEdge CarcassonneGraph City Cloister FeatureGraph FilteredConnectedComponentsAlgorithm<TVertex, TEdge> Algorithm that computes connected components of a graph. Road SubTile Interfaces IFeature Enums ConnectionType"
  },
  "api/Carcassonne.State.Features.IFeature.html": {
    "href": "api/Carcassonne.State.Features.IFeature.html",
    "title": "Interface IFeature | cARcassonne documentation",
    "keywords": "Interface IFeature Namespace : Carcassonne.State.Features Assembly : cs.temp.dll.dll Syntax public interface IFeature Properties Complete Declaration bool Complete { get; } Property Value Type Description Boolean OpenSides Declaration int OpenSides { get; } Property Value Type Description Int32 Points Declaration int Points { get; } Property Value Type Description Int32 PotentialPoints Declaration int PotentialPoints { get; } Property Value Type Description Int32 Segments Declaration int Segments { get; } Property Value Type Description Int32"
  },
  "api/Carcassonne.State.Features.Road.html": {
    "href": "api/Carcassonne.State.Features.Road.html",
    "title": "Class Road | cARcassonne documentation",
    "keywords": "Class Road Inheritance Object CarcassonneGraph FeatureGraph Road Implements IFeature Inherited Members FeatureGraph.Segments FeatureGraph.OpenSides FeatureGraph.Complete FeatureGraph.IntraTileFeatureConnections CarcassonneGraph.Bounds CarcassonneGraph.ToString() CarcassonneGraph.GenerateGraphML(String) CarcassonneGraph.GenerateGraphviz() CarcassonneGraph.Locations CarcassonneGraph.HasMeeples CarcassonneGraph.Meeples CarcassonneGraph.PlayerMeeples CarcassonneGraph.ScoresPoints(Player) Namespace : Carcassonne.State.Features Assembly : cs.temp.dll.dll Syntax public class Road : FeatureGraph, IFeature Fields RoadFilter Declaration public static Func<IEnumerable<CarcassonneEdge>, IEnumerable<CarcassonneEdge>> RoadFilter Field Value Type Description Func < IEnumerable < CarcassonneEdge >, IEnumerable < CarcassonneEdge >> Properties Points Declaration public override int Points { get; } Property Value Type Description Int32 Overrides FeatureGraph.Points PotentialPoints Declaration public override int PotentialPoints { get; } Property Value Type Description Int32 Overrides FeatureGraph.PotentialPoints Methods FromBoardGraph(BoardGraph) Declaration public static List<Road> FromBoardGraph(BoardGraph bg) Parameters Type Name Description BoardGraph bg Returns Type Description List < Road > RoadFromVertexList(BoardGraph, IEnumerable<SubTile>) Declaration public static Road RoadFromVertexList(BoardGraph bg, IEnumerable<SubTile> vertices) Parameters Type Name Description BoardGraph bg IEnumerable < SubTile > vertices Returns Type Description Road Implements IFeature"
  },
  "api/Carcassonne.State.Features.SubTile.html": {
    "href": "api/Carcassonne.State.Features.SubTile.html",
    "title": "Class SubTile | cARcassonne documentation",
    "keywords": "Class SubTile Inheritance Object SubTile Namespace : Carcassonne.State.Features Assembly : cs.temp.dll.dll Syntax public class SubTile : IComparable<SubTile> Constructors SubTile(Tile, Vector2Int, Geography, Boolean) Create a new SubTile Declaration public SubTile(Tile tile, Vector2Int cell, Geography geography, bool shield) Parameters Type Name Description Tile tile Reference to the Tile Vector2Int cell Geography geography Boolean shield Fields geography Declaration public Geography geography Field Value Type Description Geography location Declaration public Vector2Int location Field Value Type Description Vector2Int meeple Declaration public Meeple meeple Field Value Type Description Meeple player Declaration public Player player Field Value Type Description Player tile Declaration public Tile tile Field Value Type Description Tile Properties geographyID Declaration public int geographyID { get; } Property Value Type Description Int32 hasMeeple Declaration public bool hasMeeple { get; } Property Value Type Description Boolean playerID Declaration public int playerID { get; } Property Value Type Description Int32 shield Declaration public bool shield { get; set; } Property Value Type Description Boolean tileID Declaration public int tileID { get; } Property Value Type Description Int32 tileRotation Declaration public int tileRotation { get; } Property Value Type Description Int32 turn Declaration public int turn { get; set; } Property Value Type Description Int32 x Declaration public int x { get; } Property Value Type Description Int32 y Declaration public int y { get; } Property Value Type Description Int32 Methods CompareTo(SubTile) Declaration public int CompareTo(SubTile other) Parameters Type Name Description SubTile other Returns Type Description Int32"
  },
  "api/Carcassonne.State.FeatureState.html": {
    "href": "api/Carcassonne.State.FeatureState.html",
    "title": "Class FeatureState | cARcassonne documentation",
    "keywords": "Class FeatureState Inheritance Object FeatureState Namespace : Carcassonne.State Assembly : cs.temp.dll.dll Syntax public class FeatureState Constructors FeatureState(MeepleState, GridMapper) Declaration public FeatureState(MeepleState meeples, GridMapper grid) Parameters Type Name Description MeepleState meeples GridMapper grid Fields Cities Declaration public List<City> Cities Field Value Type Description List < City > Cloisters Declaration public List<Cloister> Cloisters Field Value Type Description List < Cloister > Graph Declaration public BoardGraph Graph Field Value Type Description BoardGraph grid Declaration public GridMapper grid Field Value Type Description GridMapper Meeples Declaration public MeepleState Meeples Field Value Type Description MeepleState Roads Declaration public List<Road> Roads Field Value Type Description List < Road > Properties All Declaration public IEnumerable<FeatureGraph> All { get; } Property Value Type Description IEnumerable < FeatureGraph > Complete Declaration public IEnumerable<FeatureGraph> Complete { get; } Property Value Type Description IEnumerable < FeatureGraph > CompleteWithMeeples An enumerable list of cities that are complete, but still have meeples registered on them. These have not been processed for points and need to be Declaration public IEnumerable<FeatureGraph> CompleteWithMeeples { get; } Property Value Type Description IEnumerable < FeatureGraph > Incomplete Declaration public IEnumerable<FeatureGraph> Incomplete { get; } Property Value Type Description IEnumerable < FeatureGraph > IncompleteWithMeeples An enumerable list of cities that are incomplete, and have meeples registered on them. Declaration public IEnumerable<FeatureGraph> IncompleteWithMeeples { get; } Property Value Type Description IEnumerable < FeatureGraph > Methods GetFeatureAt(Vector2Int) Gets the feature at the location on the baord. The location does not necessarily map to a vertex. It can be a corner or a centre piece of a tile that is not vertex-mapped. Declaration public FeatureGraph GetFeatureAt(Vector2Int location) Parameters Type Name Description Vector2Int location The subtile location Returns Type Description FeatureGraph GetFeatureAt(Vector2Int, Vector2Int) Declaration public FeatureGraph GetFeatureAt(Vector2Int position, Vector2Int direction) Parameters Type Name Description Vector2Int position Vector2Int direction Returns Type Description FeatureGraph UpdateFeatures(Object, BoardChangedEventArgs) Declaration public void UpdateFeatures(object sender, BoardChangedEventArgs args) Parameters Type Name Description Object sender BoardChangedEventArgs args"
  },
  "api/Carcassonne.State.GameRules.html": {
    "href": "api/Carcassonne.State.GameRules.html",
    "title": "Struct GameRules | cARcassonne documentation",
    "keywords": "Struct GameRules Namespace : Carcassonne.State Assembly : cs.temp.dll.dll Syntax public struct GameRules Fields Abbots Declaration public bool Abbots Field Value Type Description Boolean BoardLimits Declaration public static readonly RectInt BoardLimits Field Value Type Description RectInt BoardSize Declaration public const int BoardSize = 40 Field Value Type Description Int32 Farmer Declaration public bool Farmer Field Value Type Description Boolean MeeplesPerPlayer Declaration public const int MeeplesPerPlayer = 7 Field Value Type Description Int32 River Declaration public bool River Field Value Type Description Boolean Methods GetStartingTileID() Declaration public int GetStartingTileID() Returns Type Description Int32 GetTileIDCounts() Declaration public IDictionary<int, int> GetTileIDCounts() Returns Type Description IDictionary < Int32 , Int32 >"
  },
  "api/Carcassonne.State.GameState.html": {
    "href": "api/Carcassonne.State.GameState.html",
    "title": "Class GameState | cARcassonne documentation",
    "keywords": "Class GameState Inheritance Object GameState Namespace : Carcassonne.State Assembly : cs.temp.dll.dll Syntax public class GameState : MonoBehaviour Fields Features Declaration public FeatureState Features Field Value Type Description FeatureState GameID Declaration public Guid GameID Field Value Type Description Guid grid Declaration public GridMapper grid Field Value Type Description GridMapper Meeples Declaration public MeepleState Meeples Field Value Type Description MeepleState phase Describes what is happening currently in the game. Declaration public Phase phase Field Value Type Description Phase Players Declaration public PlayerState Players Field Value Type Description PlayerState Rules Declaration public GameRules Rules Field Value Type Description GameRules Tiles Declaration public TileState Tiles Field Value Type Description TileState Timestamp Declaration public DateTime Timestamp Field Value Type Description DateTime Methods GetGraphLocationForMeeple(Meeple) Not every cell is represented in the graph. For example, the centre of a tile is often unrepresented, so one cannot query the graph by cell. This returns a represented cell on the Meeple's tile in the graph for any placed Meeple. Declaration public Vector2Int GetGraphLocationForMeeple(Meeple m) Parameters Type Name Description Meeple m Returns Type Description Vector2Int GetGraphVertexForMeeple(Meeple) Declaration public SubTile GetGraphVertexForMeeple(Meeple m) Parameters Type Name Description Meeple m Returns Type Description SubTile Reset() Declaration public void Reset()"
  },
  "api/Carcassonne.State.html": {
    "href": "api/Carcassonne.State.html",
    "title": "Namespace Carcassonne.State | cARcassonne documentation",
    "keywords": "Namespace Carcassonne.State Classes Coordinates FeatureState GameState MeepleState MeepleState hold all of the information about the position, availability, and ownership of meeples. Player meeple list derive from this information store. PlayerState TileIdComparer TileState Structs GameRules Interfaces IGamePieceState<TGamePiece> Enums Phase Describes different phases of gameplay."
  },
  "api/Carcassonne.State.IGamePieceState-1.html": {
    "href": "api/Carcassonne.State.IGamePieceState-1.html",
    "title": "Interface IGamePieceState<TGamePiece> | cARcassonne documentation",
    "keywords": "Interface IGamePieceState<TGamePiece> Namespace : Carcassonne.State Assembly : cs.temp.dll.dll Syntax public interface IGamePieceState<TGamePiece> Type Parameters Name Description TGamePiece Properties Current Declaration TGamePiece Current { get; set; } Property Value Type Description TGamePiece MatrixOrigin The position of the bottom-left corner of the representation returned by Matrix in Subtile space. Declaration Vector2Int MatrixOrigin { get; } Property Value Type Description Vector2Int Remarks For example, if the lower-leftmost city is found on a tile that is at position (x=10,y=15), MatrixOrigin would return (30,45). This can be added to the positions found in Matrix so that the data from Matrix line up with the bounding boxes returned by City.BoundingBox. Played Declaration TGamePiece[, ] Played { get; } Property Value Type Description TGamePiece[,]"
  },
  "api/Carcassonne.State.MeepleState.html": {
    "href": "api/Carcassonne.State.MeepleState.html",
    "title": "Class MeepleState | cARcassonne documentation",
    "keywords": "Class MeepleState MeepleState hold all of the information about the position, availability, and ownership of meeples. Player meeple list derive from this information store. Inheritance Object MeepleState Implements IGamePieceState < Meeple > Namespace : Carcassonne.State Assembly : cs.temp.dll.dll Syntax public class MeepleState : IGamePieceState<Meeple> Constructors MeepleState() Declaration public MeepleState() Fields All The set of all Meeples in the game. Declaration public IList<Meeple> All Field Value Type Description IList < Meeple > Placement Dictionary of meeple placement. Key is coordinate in Meeple coordinate system. Declaration public Dictionary<Vector2Int, Meeple> Placement Field Value Type Description Dictionary < Vector2Int , Meeple > Properties Current The current Meeple being played. Declaration public Meeple Current { get; set; } Property Value Type Description Meeple InPlay Declaration public IEnumerable<Meeple> InPlay { get; } Property Value Type Description IEnumerable < Meeple > Matrix NB Uses Player ID + 1 so that 0 can be an empty cell. Declaration public int[, ] Matrix { get; } Property Value Type Description Int32 [,] MatrixOrigin Declaration public Vector2Int MatrixOrigin { get; } Property Value Type Description Vector2Int Played Declaration public Meeple[, ] Played { get; } Property Value Type Description Meeple [,] Remaining Declaration public IEnumerable<Meeple> Remaining { get; } Property Value Type Description IEnumerable < Meeple > Methods ForPlayer(Player) Declaration public IEnumerable<Meeple> ForPlayer(Player p) Parameters Type Name Description Player p Returns Type Description IEnumerable < Meeple > InFeature(CarcassonneGraph) Declaration public IEnumerable<Meeple> InFeature(CarcassonneGraph feature) Parameters Type Name Description CarcassonneGraph feature Returns Type Description IEnumerable < Meeple > IsFree(Meeple) Declaration public bool IsFree(Meeple m) Parameters Type Name Description Meeple m Returns Type Description Boolean MeepleAt(Vector2Int) Declaration public Meeple MeepleAt(Vector2Int xy) Parameters Type Name Description Vector2Int xy Returns Type Description Meeple MeeplesForPlayer(Player) All of the meeples (in play and remaining) for Player p. Declaration public List<Meeple> MeeplesForPlayer(Player p) Parameters Type Name Description Player p Returns Type Description List < Meeple > RemainingForPlayer(Player) Declaration public IEnumerable<Meeple> RemainingForPlayer(Player p) Parameters Type Name Description Player p Returns Type Description IEnumerable < Meeple > Implements IGamePieceState<TGamePiece>"
  },
  "api/Carcassonne.State.Phase.html": {
    "href": "api/Carcassonne.State.Phase.html",
    "title": "Enum Phase | cARcassonne documentation",
    "keywords": "Enum Phase Describes different phases of gameplay. Namespace : Carcassonne.State Assembly : cs.temp.dll.dll Syntax public enum Phase Fields Name Description GameOver MeepleDown MeepleDrawn NewTurn TileDown TileDrawn"
  },
  "api/Carcassonne.State.PlayerState.html": {
    "href": "api/Carcassonne.State.PlayerState.html",
    "title": "Class PlayerState | cARcassonne documentation",
    "keywords": "Class PlayerState Inheritance Object PlayerState Namespace : Carcassonne.State Assembly : cs.temp.dll.dll Syntax public class PlayerState Constructors PlayerState() Declaration public PlayerState() Fields All Declaration public IList<Player> All Field Value Type Description IList < Player > Properties Current Declaration public Player Current { get; } Property Value Type Description Player Others Declaration public IEnumerable<Player> Others { get; } Property Value Type Description IEnumerable < Player > Methods Next() Declaration public Player Next() Returns Type Description Player"
  },
  "api/Carcassonne.State.TileIdComparer.html": {
    "href": "api/Carcassonne.State.TileIdComparer.html",
    "title": "Class TileIdComparer | cARcassonne documentation",
    "keywords": "Class TileIdComparer Inheritance Object TileIdComparer Namespace : Carcassonne.State Assembly : cs.temp.dll.dll Syntax public class TileIdComparer : IComparer<Tile> Methods Compare(Tile, Tile) Declaration public int Compare(Tile x, Tile y) Parameters Type Name Description Tile x Tile y Returns Type Description Int32"
  },
  "api/Carcassonne.State.TileState.html": {
    "href": "api/Carcassonne.State.TileState.html",
    "title": "Class TileState | cARcassonne documentation",
    "keywords": "Class TileState Inheritance Object TileState Implements IGamePieceState < Tile > Namespace : Carcassonne.State Assembly : cs.temp.dll.dll Syntax public class TileState : IGamePieceState<Tile> Constructors TileState() Declaration public TileState() Fields Placement Declaration public Dictionary<Vector2Int, Tile> Placement Field Value Type Description Dictionary < Vector2Int , Tile > Properties Current Declaration public Tile Current { get; set; } Property Value Type Description Tile Discarded Declaration public List<Tile> Discarded { get; set; } Property Value Type Description List < Tile > lastPlayedPosition Declaration public Vector2Int? lastPlayedPosition { get; } Property Value Type Description Nullable < Vector2Int > Limits Declaration public RectInt Limits { get; } Property Value Type Description RectInt Matrix The subtile matrix representation of the board. The bottom corner (Bottom-Left) is 0,0 and the top corner (top-right) is (3 x',3 y'), where x' and y' are the vertical and horizontal dimensions of the played tiles. This is done to match the representation used in the game. I don't know if it lines up with other image representations. Coordinates are represented [Horiz, Vert] Declaration public Geography? [, ] Matrix { get; } Property Value Type Description Nullable < Geography >[,] MatrixOrigin The position of the bottom-left corner of the representation returned by Matrix in Subtile space. Declaration public Vector2Int MatrixOrigin { get; } Property Value Type Description Vector2Int Remarks For example, if the lower-leftmost city is found on a tile that is at position (x=10,y=15), MatrixOrigin would return (30,45). This can be added to the positions found in Matrix so that the data from Matrix line up with the bounding boxes returned by City.BoundingBox. Played Declaration public Tile[, ] Played { get; } Property Value Type Description Tile [,] Remaining Declaration public Stack<Tile> Remaining { get; set; } Property Value Type Description Stack < Tile > ShieldMatrix Declaration public bool[, ] ShieldMatrix { get; } Property Value Type Description Boolean [,] TilePlacement Declaration public SortedDictionary<Tile, Vector2Int?> TilePlacement { get; } Property Value Type Description SortedDictionary < Tile , Nullable < Vector2Int >> Methods OpenPositions() Declaration public List<Vector2Int> OpenPositions() Returns Type Description List < Vector2Int > ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() Implements IGamePieceState<TGamePiece>"
  },
  "api/Carcassonne.VisualizationInputTiles.html": {
    "href": "api/Carcassonne.VisualizationInputTiles.html",
    "title": "Struct VisualizationInputTiles | cARcassonne documentation",
    "keywords": "Struct VisualizationInputTiles A method parameter struct that enforces a certain array size and handles erroneous input sizes to Namespace : Carcassonne Assembly : cs.temp.dll.dll Syntax public readonly struct VisualizationInputTiles Constructors VisualizationInputTiles(Tile[,]) Declaration public VisualizationInputTiles(Tile[, ] input) Parameters Type Name Description Tile [,] input Fields tiles Declaration public readonly Tile[, ] tiles Field Value Type Description Tile [,]"
  },
  "api/Global.AIGameController.html": {
    "href": "api/Global.AIGameController.html",
    "title": "Class AIGameController | cARcassonne documentation",
    "keywords": "Class AIGameController GameController handles all the game logic and the actual game loop Inheritance Object AIGameController Implements IGameControllerInterface Namespace : Global Assembly : cs.temp.dll.dll Syntax public class AIGameController : MonoBehaviour Fields aiPrefab Declaration public GameObject aiPrefab Field Value Type Description GameObject gameController Declaration public GameController gameController Field Value Type Description GameController m_players Declaration public List<Player> m_players Field Value Type Description List < Player > MaxScore Declaration public float MaxScore Field Value Type Description Single maxX Declaration public int maxX Field Value Type Description Int32 maxZ Declaration public int maxZ Field Value Type Description Int32 meepleController Declaration public MeepleController meepleController Field Value Type Description MeepleController meepleParent Declaration public Transform meepleParent Field Value Type Description Transform meeplePrefab Declaration public Meeple meeplePrefab Field Value Type Description Meeple minX Declaration public int minX Field Value Type Description Int32 minZ Declaration public int minZ Field Value Type Description Int32 Mode Declaration public RewardMode Mode Field Value Type Description RewardMode nPlayers Declaration public int nPlayers Field Value Type Description Int32 playerParent Declaration public Transform playerParent Field Value Type Description Transform startingTileID Declaration public int startingTileID Field Value Type Description Int32 state Declaration public GameState state Field Value Type Description GameState tileController Declaration public TileController tileController Field Value Type Description TileController tileParent Declaration public Transform tileParent Field Value Type Description Transform tilePrefab Declaration public Tile tilePrefab Field Value Type Description Tile visualizationBoard Declaration public GameObject visualizationBoard Field Value Type Description GameObject Properties turn Declaration public int turn { get; } Property Value Type Description Int32 Methods NewGame() Setup for a new game session Declaration public void NewGame() OnEndTurn() Declaration public void OnEndTurn() OnGameOver() The game is over and final points are calculated. Phase is moved to GameOver Declaration public void OnGameOver() OnNewGame() Declaration public void OnNewGame() OnPlace(Tile, Vector2Int) Declaration public void OnPlace(Tile tile, Vector2Int cell) Parameters Type Name Description Tile tile Vector2Int cell Restart() Declaration public void Restart() UpdateAIBoundary(Int32, Int32) Update the boundaries that the AI can place tiles within. Variables are based on the on tiles furthest in each direction on the grid Declaration public void UpdateAIBoundary(int x, int z) Parameters Type Name Description Int32 x Int32 z WriteGraphToFile(BoardGraph) Declaration public void WriteGraphToFile(BoardGraph g) Parameters Type Name Description BoardGraph g Implements IGameControllerInterface"
  },
  "api/Global.AppSettingsExtensions.html": {
    "href": "api/Global.AppSettingsExtensions.html",
    "title": "Class AppSettingsExtensions | cARcassonne documentation",
    "keywords": "Class AppSettingsExtensions Inheritance Object AppSettingsExtensions Namespace : Global Assembly : cs.temp.dll.dll Syntax public static class AppSettingsExtensions Methods GetChatSettings(AppSettings) Declaration public static ChatAppSettings GetChatSettings(this AppSettings appSettings) Parameters Type Name Description AppSettings appSettings Returns Type Description ChatAppSettings"
  },
  "api/Global.ChannelSelector.html": {
    "href": "api/Global.ChannelSelector.html",
    "title": "Class ChannelSelector | cARcassonne documentation",
    "keywords": "Class ChannelSelector Inheritance Object ChannelSelector Implements IPointerClickHandler Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ChannelSelector : MonoBehaviour Fields Channel Declaration public string Channel Field Value Type Description String Methods OnPointerClick(PointerEventData) Declaration public void OnPointerClick(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData SetChannel(String) Declaration public void SetChannel(string channel) Parameters Type Name Description String channel Implements IPointerClickHandler"
  },
  "api/Global.ChatAppIdCheckerUI.html": {
    "href": "api/Global.ChatAppIdCheckerUI.html",
    "title": "Class ChatAppIdCheckerUI | cARcassonne documentation",
    "keywords": "Class ChatAppIdCheckerUI Inheritance Object ChatAppIdCheckerUI Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ChatAppIdCheckerUI : MonoBehaviour"
  },
  "api/Global.ChatGui.html": {
    "href": "api/Global.ChatGui.html",
    "title": "Class ChatGui | cARcassonne documentation",
    "keywords": "Class ChatGui This simple Chat UI demonstrate basics usages of the Chat Api Inheritance Object ChatGui Implements IChatClientListener Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ChatGui : MonoBehaviour Remarks The ChatClient basically lets you create any number of channels. some friends are already set in the Chat demo \"DemoChat-Scene\", 'Joe', 'Jane' and 'Bob', simply log with them so that you can see the status changes in the Interface Workflow: Create ChatClient, Connect to a server with your AppID, Authenticate the user (apply a unique name,) and subscribe to some channels. Subscribe a channel before you publish to that channel! Note: Don't forget to call ChatClient.Service() on Update to keep the Chatclient operational. Fields ChannelsToJoinOnConnect Declaration public string[] ChannelsToJoinOnConnect Field Value Type Description String [] ChannelToggleToInstantiate Declaration public Toggle ChannelToggleToInstantiate Field Value Type Description Toggle chatAppSettings Declaration protected ChatAppSettings chatAppSettings Field Value Type Description ChatAppSettings chatClient Declaration public ChatClient chatClient Field Value Type Description ChatClient ChatPanel Declaration public RectTransform ChatPanel Field Value Type Description RectTransform ConnectingLabel Declaration public GameObject ConnectingLabel Field Value Type Description GameObject CurrentChannelText Declaration public Text CurrentChannelText Field Value Type Description Text FriendListUiItemtoInstantiate Declaration public GameObject FriendListUiItemtoInstantiate Field Value Type Description GameObject FriendsList Declaration public string[] FriendsList Field Value Type Description String [] HistoryLengthToFetch Declaration public int HistoryLengthToFetch Field Value Type Description Int32 InputFieldChat Declaration public InputField InputFieldChat Field Value Type Description InputField missingAppIdErrorPanel Declaration public GameObject missingAppIdErrorPanel Field Value Type Description GameObject ShowState Declaration public bool ShowState Field Value Type Description Boolean StateText Declaration public Text StateText Field Value Type Description Text TestLength Declaration public int TestLength Field Value Type Description Int32 Title Declaration public GameObject Title Field Value Type Description GameObject UserIdFormPanel Declaration public GameObject UserIdFormPanel Field Value Type Description GameObject UserIdText Declaration public Text UserIdText Field Value Type Description Text Properties UserName Declaration public string UserName { get; set; } Property Value Type Description String Methods AddMessageToSelectedChannel(String) Declaration public void AddMessageToSelectedChannel(string msg) Parameters Type Name Description String msg Connect() Declaration public void Connect() DebugReturn(ExitGames.Client.Photon.DebugLevel, String) Declaration public void DebugReturn(ExitGames.Client.Photon.DebugLevel level, string message) Parameters Type Name Description ExitGames.Client.Photon.DebugLevel level String message OnApplicationQuit() To avoid that the Editor becomes unresponsive, disconnect all Photon connections in OnApplicationQuit. Declaration public void OnApplicationQuit() OnChannelPropertiesChanged(String, String, Dictionary<Object, Object>) Declaration public void OnChannelPropertiesChanged(string channel, string userId, Dictionary<object, object> properties) Parameters Type Name Description String channel String userId Dictionary < Object , Object > properties OnChatStateChange(ChatState) Declaration public void OnChatStateChange(ChatState state) Parameters Type Name Description ChatState state OnClickSend() Declaration public void OnClickSend() OnConnected() Declaration public void OnConnected() OnDestroy() To avoid that the Editor becomes unresponsive, disconnect all Photon connections in OnDestroy. Declaration public void OnDestroy() OnDisconnected() Declaration public void OnDisconnected() OnEnterSend() Declaration public void OnEnterSend() OnErrorInfo(String, String, Object) Declaration public void OnErrorInfo(string channel, string error, object data) Parameters Type Name Description String channel String error Object data OnGetMessages(String, String[], Object[]) Declaration public void OnGetMessages(string channelName, string[] senders, object[] messages) Parameters Type Name Description String channelName String [] senders Object [] messages OnPrivateMessage(String, Object, String) Declaration public void OnPrivateMessage(string sender, object message, string channelName) Parameters Type Name Description String sender Object message String channelName OnStatusUpdate(String, Int32, Boolean, Object) New status of another user (you get updates for users set in your friends list). Declaration public void OnStatusUpdate(string user, int status, bool gotMessage, object message) Parameters Type Name Description String user Name of the user. Int32 status New status of that user. Boolean gotMessage True if the status contains a message you should cache locally. False: This status update does not include a message (keep any you have). Object message Message that user set. OnSubscribed(String, String[], Dictionary<Object, Object>) Declaration public void OnSubscribed(string channel, string[] users, Dictionary<object, object> properties) Parameters Type Name Description String channel String [] users Dictionary < Object , Object > properties OnSubscribed(String[], Boolean[]) Declaration public void OnSubscribed(string[] channels, bool[] results) Parameters Type Name Description String [] channels Boolean [] results OnUnsubscribed(String[]) Declaration public void OnUnsubscribed(string[] channels) Parameters Type Name Description String [] channels OnUserPropertiesChanged(String, String, String, Dictionary<Object, Object>) Declaration public void OnUserPropertiesChanged(string channel, string targetUserId, string senderUserId, Dictionary<object, object> properties) Parameters Type Name Description String channel String targetUserId String senderUserId Dictionary < Object , Object > properties OnUserSubscribed(String, String) Declaration public void OnUserSubscribed(string channel, string user) Parameters Type Name Description String channel String user OnUserUnsubscribed(String, String) Declaration public void OnUserUnsubscribed(string channel, string user) Parameters Type Name Description String channel String user OpenDashboard() Declaration public void OpenDashboard() PostHelpToCurrentChannel() Declaration public void PostHelpToCurrentChannel() ShowChannel(String) Declaration public void ShowChannel(string channelName) Parameters Type Name Description String channelName Start() Declaration public void Start() Update() Declaration public void Update() Implements IChatClientListener"
  },
  "api/Global.FriendItem.html": {
    "href": "api/Global.FriendItem.html",
    "title": "Class FriendItem | cARcassonne documentation",
    "keywords": "Class FriendItem Friend UI item used to represent the friend status as well as message. It aims at showing how to share health for a friend that plays on a different room than you for example. But of course the message can be anything and a lot more complex. Inheritance Object FriendItem Namespace : Global Assembly : cs.temp.dll.dll Syntax public class FriendItem : MonoBehaviour Fields Health Declaration public Text Health Field Value Type Description Text NameLabel Declaration public Text NameLabel Field Value Type Description Text StatusLabel Declaration public Text StatusLabel Field Value Type Description Text Properties FriendId Declaration public string FriendId { get; set; } Property Value Type Description String Methods Awake() Declaration public void Awake() OnFriendStatusUpdate(Int32, Boolean, Object) Declaration public void OnFriendStatusUpdate(int status, bool gotMessage, object message) Parameters Type Name Description Int32 status Boolean gotMessage Object message"
  },
  "api/Global.GameLog.html": {
    "href": "api/Global.GameLog.html",
    "title": "Class GameLog | cARcassonne documentation",
    "keywords": "Class GameLog A log of the Turn for a game. Inheritance Object GameLog Namespace : Global Assembly : cs.temp.dll.dll Syntax [Serializable] public class GameLog : MonoBehaviour Remarks Turns are stored in a Stack<T> which is built as the game progresses. Fields CSV_HEADER Declaration public static string[] CSV_HEADER Field Value Type Description String [] state Declaration public GameState state Field Value Type Description GameState TurnLogged Declaration public UnityEvent<Turn> TurnLogged Field Value Type Description UnityEvent < Turn > Turns Declaration public Stack<Turn> Turns Field Value Type Description Stack < Turn > Properties grid Declaration public GridMapper grid { get; } Property Value Type Description GridMapper Methods LogTurn() Declaration public void LogTurn() OnGameOver() Declaration public void OnGameOver() Reset() Declaration public void Reset()"
  },
  "api/Global.html": {
    "href": "api/Global.html",
    "title": "Namespace Global | cARcassonne documentation",
    "keywords": "Namespace Global Classes AIGameController GameController handles all the game logic and the actual game loop AppSettingsExtensions ChannelSelector ChatAppIdCheckerUI ChatGui This simple Chat UI demonstrate basics usages of the Chat Api FriendItem Friend UI item used to represent the friend status as well as message. It aims at showing how to share health for a friend that plays on a different room than you for example. But of course the message can be anything and a lot more complex. GameLog A log of the Turn for a game. IgnoreUiRaycastWhenInactive NamePickGui PunStartup ServerSettingsInspector TileInspector Structs Turn Represents the entire moves of a single player during one round of play. TurnPoints Enums RewardMode"
  },
  "api/Global.IgnoreUiRaycastWhenInactive.html": {
    "href": "api/Global.IgnoreUiRaycastWhenInactive.html",
    "title": "Class IgnoreUiRaycastWhenInactive | cARcassonne documentation",
    "keywords": "Class IgnoreUiRaycastWhenInactive Inheritance Object IgnoreUiRaycastWhenInactive Implements ICanvasRaycastFilter Namespace : Global Assembly : cs.temp.dll.dll Syntax public class IgnoreUiRaycastWhenInactive : MonoBehaviour Methods IsRaycastLocationValid(Vector2, Camera) Declaration public bool IsRaycastLocationValid(Vector2 screenPoint, Camera eventCamera) Parameters Type Name Description Vector2 screenPoint Camera eventCamera Returns Type Description Boolean Implements ICanvasRaycastFilter"
  },
  "api/Global.NamePickGui.html": {
    "href": "api/Global.NamePickGui.html",
    "title": "Class NamePickGui | cARcassonne documentation",
    "keywords": "Class NamePickGui Inheritance Object NamePickGui Namespace : Global Assembly : cs.temp.dll.dll Syntax public class NamePickGui : MonoBehaviour Fields chatNewComponent Declaration public ChatGui chatNewComponent Field Value Type Description ChatGui idInput Declaration public InputField idInput Field Value Type Description InputField Methods EndEditOnEnter() Declaration public void EndEditOnEnter() Start() Declaration public void Start() StartChat() Declaration public void StartChat()"
  },
  "api/Global.PunStartup.html": {
    "href": "api/Global.PunStartup.html",
    "title": "Class PunStartup | cARcassonne documentation",
    "keywords": "Class PunStartup Inheritance Object PunStartup Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PunStartup : MonoBehaviour Methods FindAssetPath(String) Finds the asset path base on its name or search query: https://docs.unity3d.com/ScriptReference/AssetDatabase.FindAssets.html Declaration public static string FindAssetPath(string asset) Parameters Type Name Description String asset Asset filter for AssetDatabase.FindAssets. Returns Type Description String The asset path. String.Empty, if not found. LoadPunDemoHub() Declaration public static void LoadPunDemoHub() SetPunDemoBuildSettings() Finds scenes in \"Assets/Photon Unity Networking/Demos/\", excludes those in folder \"PUNGuide_M2H\" and applies remaining scenes to build settings. The one with \"Hub\" in it first. Declaration public static void SetPunDemoBuildSettings() SetupDemo() Declaration public static void SetupDemo()"
  },
  "api/Global.RewardMode.html": {
    "href": "api/Global.RewardMode.html",
    "title": "Enum RewardMode | cARcassonne documentation",
    "keywords": "Enum RewardMode Namespace : Global Assembly : cs.temp.dll.dll Syntax public enum RewardMode Fields Name Description Score Winner"
  },
  "api/Global.ServerSettingsInspector.html": {
    "href": "api/Global.ServerSettingsInspector.html",
    "title": "Class ServerSettingsInspector | cARcassonne documentation",
    "keywords": "Class ServerSettingsInspector Inheritance Object ServerSettingsInspector Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ServerSettingsInspector : Editor Methods Awake() Declaration public void Awake() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Global.TileInspector.html": {
    "href": "api/Global.TileInspector.html",
    "title": "Class TileInspector | cARcassonne documentation",
    "keywords": "Class TileInspector Inheritance Object TileInspector Namespace : Global Assembly : cs.temp.dll.dll Syntax public class TileInspector : UnityEditor.Editor Methods OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Global.Turn.html": {
    "href": "api/Global.Turn.html",
    "title": "Struct Turn | cARcassonne documentation",
    "keywords": "Struct Turn Represents the entire moves of a single player during one round of play. Namespace : Global Assembly : cs.temp.dll.dll Syntax [Serializable] public struct Turn Remarks Stores the player, their tile placement, and their meeple placement (if any) for a given turn Fields cell Declaration public Vector2Int cell Field Value Type Description Vector2Int meeplePlacement Declaration public Vector2Int? meeplePlacement Field Value Type Description Nullable < Vector2Int > meeplesRemaining Declaration public int meeplesRemaining Field Value Type Description Int32 player Declaration public Player player Field Value Type Description Player pointDifference Declaration public Dictionary<Player, TurnPoints> pointDifference Field Value Type Description Dictionary < Player , TurnPoints > points Declaration public Dictionary<Player, TurnPoints> points Field Value Type Description Dictionary < Player , TurnPoints > tile Declaration public Tile tile Field Value Type Description Tile Properties MeeplePlayed Declaration public readonly bool MeeplePlayed { get; } Property Value Type Description Boolean Methods ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString()"
  },
  "api/Global.TurnPoints.html": {
    "href": "api/Global.TurnPoints.html",
    "title": "Struct TurnPoints | cARcassonne documentation",
    "keywords": "Struct TurnPoints Namespace : Global Assembly : cs.temp.dll.dll Syntax [Serializable] public struct TurnPoints Fields potentialPoints Declaration public int potentialPoints Field Value Type Description Int32 scoredPoints Declaration public int scoredPoints Field Value Type Description Int32 unscoredPoints Declaration public int unscoredPoints Field Value Type Description Int32 Methods ToCSV() Declaration public string ToCSV() Returns Type Description String ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString() Operators Subtraction(TurnPoints, TurnPoints) Declaration public static TurnPoints operator -(TurnPoints a, TurnPoints b) Parameters Type Name Description TurnPoints a TurnPoints b Returns Type Description TurnPoints"
  },
  "articles/architecture.html": {
    "href": "articles/architecture.html",
    "title": "The New Game Architecture (January 2022) | cARcassonne documentation",
    "keywords": "The New Game Architecture (January 2022) Layers Game State/Logic Game Actions Game View Model This covers non-visual aspects of the game. Classes are not generally MonoBehaviours. It holds the state of the board, the state of the deck. It uses those states to calculate points, possible positions, etc. It can be re-used by many different visual interfaces. Model encapsulates the static elements of the game and the state of them as the game progresses. What it is not Game Actions (Controller) This is where things happen in the game. Events are dispatched from here. Actions are registered and passed to the model. The AI Training and User Game Views utilize this layer to manipulate the game logic and state. Game End Turn > GameController.EndTurn() Reset the game > GameController.Reset() Tile Draw a tile > TileController.Draw() Rotate the tile > TileController.Rotate() Place a tile > TileController.Place() Meeple Draw a meeple > MeepleController.Draw() Place a meeple > MeepleController.Place() Discard a meeple > MeepleController.Discard() Game View (View) This covers aspects of the game in motion. It includes visualizations, user manipulations, animations."
  },
  "articles/gameplayAI.html": {
    "href": "articles/gameplayAI.html",
    "title": "Gameplay AI | cARcassonne documentation",
    "keywords": "Gameplay AI Overview The goal of this project is to develop an AI to play the board game Carcassonne. The AI should be able to learn how to play the game against other AI agents as well as against human players. It should have a tunable play difficulty and should be relatively transparent in its decision-making so that it is possible to understand why it is taking particular actions. The ultimate goal is to integrate the AI into the augmented reality (AR) version of Carcassonne that is under development. For this, it would be beneficial for the agent to be developed using Unity’s ML-Agents toolkit ( https://unity.com/products/machine-learning-agents ). However, it is also possible to experiment with other versions of Carcassonne and alternative learning toolkits such as PyTorch and Tensorflow. A secondary goal of this project is to generate a dataset of possible game moves and their utility within the game. In training the AI agents, we will record all of the game metadata in order to create a large database of Carcassonne gameplay actions to use in future studies. Goals In order of importance. Goals further down the list are secondary and only to be taken on if success is achieved in the first goal(s). Produce a working Carcassonne AI that plays in the cARcassonne game in Unity Simulate AI-vs-AI games Extend the AI to emulate different player strategies, levels of experience, etc. Remember This project is part of a larger codebase. The job is not just to make something that works. It is also to develop something that is organized and well-documented so that the next people who come along can add/modify/enhance it. Please make sure to comment code using standard documentation formats . David will spend some time trying to get proper documentation building and unit testing enabled on the project, so think about how the code will be tested as well! Resources Carcassonne AI Vincent Bons has written about preparing Carcassonne for machine learning at his website . A modified version of his data representation is detailed at the State Representation document. AI in Unity Machine learning integration in Unity is often done using ML-Agents . Detailed documentation for ML-Agents is here MRTK Input Simulation https://docs.microsoft.com/en-us/windows/mixed-reality/mrtk-unity/features/input-simulation/input-simulation-service?view=mrtkunity-2021-05"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Getting Started | cARcassonne documentation",
    "keywords": "Getting Started See README for installation instructions and how to get started. Please remember to work off the Develop branch, which is the base branch we are using for coding at the moment. Navigating the Scene Navigate the scene in Unity Play mode using Input Simulation ( https://docs.microsoft.com/en-us/windows/mixed-reality/mrtk-unity/features/input-simulation/input-simulation-service?view=mrtkunity-2021-05 ) Writing Documentation This project is part of a larger codebase. Please make sure to comment code using standard documentation formats . Issue tracking Track problems with the code at https://github.com/Egocentric-Interaction-Research-Group/cARcassonne/issues ."
  },
  "articles/multiplayer.html": {
    "href": "articles/multiplayer.html",
    "title": "Barriers to 3+ players in cARcassonne | cARcassonne documentation",
    "keywords": "Barriers to 3+ players in cARcassonne Meeple Spawning Currently Meeples for 2 players are pre-defined as game objects in the TableAnchor hierarchy ( TableAnchor1 > Game > Table > Meeples ). This needs to be re-designed if more than 2 players are going to play at a time! Also, MeepleScript.SetMeepleOwner appears to have 2 players hardcoded into it. Network Lobby and Rooms [FIXED for now] Before the fix, each client would join a random existing game. If it didn't exist, it created one. This resulted in everyone always joining the same room. The way it works now, is that you may modifiy exposed fields in the inspector of PhotonLobby in order to specify which room to join (by name). If the room doesn't exist, it automatically creates one with the given name. When creating a room, the exposed field 'maxPlayers' is used to set the maximum number of players allowed in the room. An attempt to postpone the joining of a room seemed to be break more things than it was intended to solve, so for now the room specified in the inspector is joined when starting the game. The in-game start button only takes you to the Carcassonne board, since you would already have joined a room on start-up. It would be ideal in the future, if we redo a lot of UI in order to provide a list of selectable open rooms, and a new button for the option of creating a new room. As an alternative we might, instead of a separate button for a new room, always have a New Room list item at the bottom of the list, which would reduce the workload somewhat, and is perhaps even preferrable. This way, you would only join a lobby on start up. You would join a room when selected in the GUI and you press the \"Start Game\" button. Keep in mind , though, that attempting to postpone the joining of rooms, will most likely introduce an array of issues, so tread lightly. -- Kasper Skott"
  },
  "articles/orientation.html": {
    "href": "articles/orientation.html",
    "title": "Grid Orientation | cARcassonne documentation",
    "keywords": "Grid Orientation This describes the orientations of the various grids in cARcassonne. Visual Game Board NB: The game's visual grid (and tiles) should be replaced with Unity's built-in system as in https://github.com/Egocentric-Interaction-Research-Group/cARcassonne/issues/8 Floating point coordinate system has origin at bottom left. Right is x-positive. Up is y-positive. Board Tile Matrix In the board matrix, (0,0) is at the bottom left. Right is x-positive. Up is y-positive. Centre is 85, 85. Each tile takes up a space, so the limits after the first tile at (85, 85) - (86, 86)"
  },
  "articles/situationRecognition.html": {
    "href": "articles/situationRecognition.html",
    "title": "Situation Recognition | cARcassonne documentation",
    "keywords": "Situation Recognition Overview The goal of the project is to be able to recognize basic situations occurring in the board game Carcassonne. For example, we might try to detect when a city, road, or cloister has been completed. The main task will be to build an AI model to detect important situations in a game. The specific situations will depend on how the project develops, but one might, for example, attempt to detect when different game elements (roads, cities, cloisters) are completed and determine who gets points (and how many) for the element. Goals In order of importance. Goals further down the list are secondary and only to be taken on if success is achieved in the first goal(s). [Possible Starting Point] Perform situation detection using conventional (non-AI) methods (if this seems easier than using AI) Produce an AI able to detect a specific simple game situation (e.g. a city is completed) Produce an AI able to detect a more complex game situation (e.g. a player is attempting to merge two cities) [Stretch goal] Produce a AI able to detect and classify general, unlabelled \"situations\" in game scenarios. Remember This project is part of a larger codebase. The job is not just to make something that works. It is also to develop something that is organized and well-documented so that the next people who come along can add/modify/enhance it. Please make sure to comment code using standard documentation formats . David will spend some time trying to get proper documentation building and unit testing enabled on the project, so think about how the code will be tested as well! Resources Game State Vincent Bons has written about preparing Carcassonne for machine learning at his website , but this also contains some good ideas about how to represent the state of the game. A modified version of his data representation is detailed at the State Representation document. Situation Recognition Here's a short list of some resources on situation recognition . Treat this as a starting point. There are plenty more articles and approaches on this, so it would probably be helpful to take a little time to do some deeper reading. I suspect this is a little more formal than we will want to be here, but it's a good starting point: A method for automatic situation recognition in collaborative multiplayer Serious Games I haven't given this a close read, but it looks interesting on first inspection: Situation Recognition with Graph Neural Networks There's a piece of software called EventShop that a lot seems to be written about. It is about 5 years old (at least) and doesn't seem to be in active development, but it might be worth giving it a look. Situation Recognition Using EventShop is a book that is available through the MAU library A research website dealing with EventShop EventShop Github page Object detection https://cocodataset.org/#detection-2020 https://pytorch.org/tutorials/intermediate/torchvision_tutorial.html"
  },
  "articles/SituationRecognitionIdeas.html": {
    "href": "articles/SituationRecognitionIdeas.html",
    "title": "Feature Finding, Posthoc Clustering | cARcassonne documentation",
    "keywords": "Feature Finding, Posthoc Clustering Proposal: A \"situation\" is a turning point in the game. What if the deep learning system's main task is to extract features, representations of the board. Then, after the fact, it combs through gameplays and finds important situations, groups them, and then labels them. Graph Representation Building on a reading of https://distill.pub/2021/gnn-intro/ . The representation could be a graph matrix (as a tensor) with each layer representing different graph properties. One layer can represent (left/right/up/down) adjacency, another can represent meeples, another can represent nodal connections..."
  },
  "articles/states.html": {
    "href": "articles/states.html",
    "title": "Overview | cARcassonne documentation",
    "keywords": "Overview A proposed comprehensive game state is defined in this document as well as a proposed action representation. Actions cause state changes and the game should be able to be defined by an initial state and a set of actions, though this may not be true for portions (especially the physiological portions) of the player states. The state of the game is divided into categories: Rules, Game, and Player. Carcassonne can be played with different rule sets, so it is important to define here which rules and modifications are being used. In the current implementation of the game, the rules are fixed, but this is included for future developments and to specify which rules are being used currently. The state variables are further tagged as Intrinsic, Derived , Measured , Inaccessible using italics and bold font. Intrinsic state variables come directly from the game pieces, holding information like the location of tiles, etc. Derived state variables can be calculated from Intrinsic ones, such as the number of tiles remaining, which can be found using the set of tiles on the board. Measured state variables are primarily player-related physiological states that we can measure using the equipment being used. And Inaccessible are player-related states that are not immediately available and must be learned/estimated or require additional equipment (but could be interesting and relevant for assessing their gameplay). I should note that this draws heavily on the framework at https://wingedsheep.com/programming-carcassonne/ . Board Representations There are two possible representations (that I've come up with...I'm sure there are more!) for the positions of the tiles on the board. Each has its advantages and disadvantages and we might end up wanting to move between them. Tiles and the entire board can be represented as a matrix of features. Each tile is a 3x3 matrix and each feature is one of R oad, C ity, or Ch apel (we ignore Fields and Rivers for now because they are not being used in this rule set). The alternative representation is as a graph of features with ports on the N orth, S outh, E ast, and W est of each tile (these cardinal directions are fixed for a tile and if the tile is rotated, N might face down or to the side). These two representations expand from the tile into the whole board, creating a board-wide matrix of roads and cities, or a board-wide graph of the same. Useful Data Tiles There are 48 land tiles and 12 river tiles (if they are being used). 48 land 12 river (should not used here, but they do currently appear in the game) Meeples Colours: yellow, red, green, blue, black 7 + abbot (-1 for scoreboard) Roles: highwayperson, knight, monk, farmer? State Rules abbots ( bool : False ) river ( bool : False ) This is currently implemented incorrectly. River tiles are mixed in with the main game tiles, but they should be placed at the beginning of the game if they are being used. farmers ( bool : False ) Game phase { GameControllerScript.phase } ( enum: [tile, meeple, scoring] ) remaining tiles { StackScript } ( list ) current tile ( obj ) allowed tile placements ( list ) allowed meeple placements ( list ) players ( list ) current player ( obj ) played tiles { PlacedTileScript } ( matrix ) we could also use a graph representation here, which might be more effective. cities complete ( bool ) segments ( int ) shields ( int ) meeples ( list ) open sides ( int ) completable ( bool ) calculated from the remaining game tiles roads complete ( bool ) segments ( int ) meeples ( list ) open sides ( int ) completable ( bool ) calculated from the remaining game tiles chapels complete ( bool ) segments ( int ) meeples ( list ) completable ( bool ) calculated from the remaining game tiles Tile set ( enum : [main, river, ...] ) shield ( bool ) layout ( matrix ) we could also use a graph representation here, which might be more effective. meeple ( obj ) meeple position ( enum : [N,S,E,W,C] ) Meeple set ( enum : [main, abbot] ) player ( obj ) colour placement Player score ( int ) score including unfinished ( int ) remaining meeples ( int ) priorities/focus/short-term goals play style/strategy preference expertise/experience Physiology alertness distraction attention/saliency map emotional valence emotional arousal heartrate EEG data (for example from https://www.emotiv.com/ ) Actions Tile placement ( matrix ) in graph representation: new connection point Meeple placement ( enum : [N,S,E,W,C] )"
  },
  "index.html": {
    "href": "index.html",
    "title": "cARcassonne | cARcassonne documentation",
    "keywords": "cARcassonne Augmented Reality Carcassonne using the HoloLens2 and MRTK in Unity Code at https://github.com/Egocentric-Interaction-Research-Group/cARcassonne Dependencies cARcassonne has recently moved to the Unity OpenXR Plugin system and Microsoft's Mixed Reality OpenXR plugin. These should be installed automatically, but they are listed here for reference. Mixed Reality OpenXR plugin: version 1.0.3 MRTK: version 2.7.3 ML Agents: version 2.0.1 AR Foundation: version 4.2.2 Universal Render Pipeline (URP): version 12.1.6 Installation Installation lists software versions that have been tested with the setup. Other versions may or may not work! Prerequisites Windows 10 Education (21H1) Tested on this particular build. Should work on many others as well. > OS X : This also seems to work on OS X 11.6 Big Sur and 12.2 Monterey, tested on a Mac M1. Note that there are limitations here. At the time of writing (May 2022), Unity and Jetbrains Rider have Native M1 apps, but they are slow. It is also not possible to build for Hololens on the M1. Unity Hub (v3.1.2) Microsoft Visual Studio Community 2019 (16.11.3) OR JetBrains Rider (2022.1+) Github Client Terminal Client (any one will do) Github Desktop ( https://desktop.github.com/ ) Gitkraken ( https://www.gitkraken.com/ ) Installing Install Unity 2021.3.1f1 from Unity Hub Make sure Universal Windows Platform Build Support is checked. > OS X : UWP isn't an option, so I've just installed Mac and Windows build support Clone the project from Github. Check out the develop branch and fork from there.individial work branches from there. Add the project to Unity Hub ( Projects > Add ) Make sure the project has the right Unity version and open it. This could take a while as Unity finds and downloads packages, etc. The MRTK Project Configurator should pop up. Apply the default settings. The click Next and then Done Add the missing Scenes to the Project Hierarchy: Open GameScene from Assets > Scenes Press play and the project should run! Troubleshooting Reference rewriter: Error: type System.Web.HttpUtility doesn't exist in target framework. It is referenced from RestSharp.dll at System.String RestSharp.Extensions.StringExtensions::HtmlAttributeEncode(System.String). Select \"..\\Assets\\MRTK.Tutorials.AzureSpatialAnchors\\Plugins\\RestSharp.dll\" Change the settings of the inspector panel Platform settings->SDK->UWP Check \"Don't process\" Uncheck “Select platforms for plugin->Any Platform”, and Check ALL platforms below P.S. I'm not sure which step took effect. For steps 2.1 to 2.3, I did it together. According to experience, I think step 2.1 is the key, but I still did 2.2 and 2.3 to ensure that it is correct. Unity crashes while loading, \"Importing Assets: Compiling Assembly Definition Files scripts\" Delete Library and Temp folders Try again"
  },
  "manual/base.html": {
    "href": "manual/base.html",
    "title": "Base | cARcassonne documentation",
    "keywords": "Base The game base is designed roughly according to the classic Model-View-Controller design pattern. It incorporates basic Unity features (elements are generally of the type @Unity.Engine.MonoBehavior), but does not depend on any of the implementation-specific libraries (i.e. @Photon). Models Matrix Representation Graph Representation State Controllers"
  },
  "manual/Overview.html": {
    "href": "manual/Overview.html",
    "title": "Overview | cARcassonne documentation",
    "keywords": "Overview Codebase The code is divided into 5 main assemblies. 3 of these ( Carcassonne.Models , Carcassonne.State , and @Carcassonne.Controllers) form the basic, re-usable code for the Carcassonne game. The other two ( Carcassonne.AR and @Carcassonne.AI) contain implementation-specific code that relies on the other 3 libraries/assemblies to produce different working versions of the game. Carcassonne.AR is the main Hololens-playable version of the game, while Carcassonne.AI encompasses environments for training gameplay AI agents."
  }
}